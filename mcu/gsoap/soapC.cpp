/* soapC.cpp
   Generated by gSOAP 2.8.17r from mcu.interface.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.17r 2014-05-10 07:19:08 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_mcu__listConferences:
		return soap_in_mcu__listConferences(soap, NULL, NULL, "mcu:listConferences");
	case SOAP_TYPE_mcu__listConferencesResponse:
		return soap_in_mcu__listConferencesResponse(soap, NULL, NULL, "mcu:listConferencesResponse");
	case SOAP_TYPE_mcu__delConference:
		return soap_in_mcu__delConference(soap, NULL, NULL, "mcu:delConference");
	case SOAP_TYPE_mcu__addConference:
		return soap_in_mcu__addConference(soap, NULL, NULL, "mcu:addConference");
	case SOAP_TYPE_mcu__ConferenceArrayResponse:
		return soap_in_mcu__ConferenceArrayResponse(soap, NULL, NULL, "mcu:ConferenceArrayResponse");
	case SOAP_TYPE_mcu__ConferenceArray:
		return soap_in_mcu__ConferenceArray(soap, NULL, NULL, "mcu:ConferenceArray");
	case SOAP_TYPE_mcu__ConferenceResponse:
		return soap_in_mcu__ConferenceResponse(soap, NULL, NULL, "mcu:ConferenceResponse");
	case SOAP_TYPE_mcu__Conference:
		return soap_in_mcu__Conference(soap, NULL, NULL, "mcu:Conference");
	case SOAP_TYPE_mcu__enableSound:
		return soap_in_mcu__enableSound(soap, NULL, NULL, "mcu:enableSound");
	case SOAP_TYPE_mcu__enableSoundResponse:
		return soap_in_mcu__enableSoundResponse(soap, NULL, NULL, "mcu:enableSoundResponse");
	case SOAP_TYPE_mcu__delMember:
		return soap_in_mcu__delMember(soap, NULL, NULL, "mcu:delMember");
	case SOAP_TYPE_mcu__addMember:
		return soap_in_mcu__addMember(soap, NULL, NULL, "mcu:addMember");
	case SOAP_TYPE_mcu__MemberArray:
		return soap_in_mcu__MemberArray(soap, NULL, NULL, "mcu:MemberArray");
	case SOAP_TYPE_mcu__MemberResponse:
		return soap_in_mcu__MemberResponse(soap, NULL, NULL, "mcu:MemberResponse");
	case SOAP_TYPE_mcu__Member:
		return soap_in_mcu__Member(soap, NULL, NULL, "mcu:Member");
	case SOAP_TYPE_mcu__delAudioStream:
		return soap_in_mcu__delAudioStream(soap, NULL, NULL, "mcu:delAudioStream");
	case SOAP_TYPE_mcu__addAudioStream:
		return soap_in_mcu__addAudioStream(soap, NULL, NULL, "mcu:addAudioStream");
	case SOAP_TYPE_mcu__AudioStreamResponse:
		return soap_in_mcu__AudioStreamResponse(soap, NULL, NULL, "mcu:AudioStreamResponse");
	case SOAP_TYPE_mcu__AudioStream:
		return soap_in_mcu__AudioStream(soap, NULL, NULL, "mcu:AudioStream");
	case SOAP_TYPE_mcu__delVideoSink:
		return soap_in_mcu__delVideoSink(soap, NULL, NULL, "mcu:delVideoSink");
	case SOAP_TYPE_mcu__addVideoSink:
		return soap_in_mcu__addVideoSink(soap, NULL, NULL, "mcu:addVideoSink");
	case SOAP_TYPE_mcu__VideoSinkArray:
		return soap_in_mcu__VideoSinkArray(soap, NULL, NULL, "mcu:VideoSinkArray");
	case SOAP_TYPE_mcu__VideoSinkResponse:
		return soap_in_mcu__VideoSinkResponse(soap, NULL, NULL, "mcu:VideoSinkResponse");
	case SOAP_TYPE_mcu__VideoSink:
		return soap_in_mcu__VideoSink(soap, NULL, NULL, "mcu:VideoSink");
	case SOAP_TYPE_mcu__delVideoSource:
		return soap_in_mcu__delVideoSource(soap, NULL, NULL, "mcu:delVideoSource");
	case SOAP_TYPE_mcu__addVideoSource:
		return soap_in_mcu__addVideoSource(soap, NULL, NULL, "mcu:addVideoSource");
	case SOAP_TYPE_mcu__VideoSourceArray:
		return soap_in_mcu__VideoSourceArray(soap, NULL, NULL, "mcu:VideoSourceArray");
	case SOAP_TYPE_mcu__VideoSourceResponse:
		return soap_in_mcu__VideoSourceResponse(soap, NULL, NULL, "mcu:VideoSourceResponse");
	case SOAP_TYPE_mcu__VideoSource:
		return soap_in_mcu__VideoSource(soap, NULL, NULL, "mcu:VideoSource");
	case SOAP_TYPE_mcu__MediaEndpoint:
		return soap_in_mcu__MediaEndpoint(soap, NULL, NULL, "mcu:MediaEndpoint");
	case SOAP_TYPE_mcu__getStatus:
		return soap_in_mcu__getStatus(soap, NULL, NULL, "mcu:getStatus");
	case SOAP_TYPE_mcu__StatusResponse:
		return soap_in_mcu__StatusResponse(soap, NULL, NULL, "mcu:StatusResponse");
	case SOAP_TYPE_mcu__Status:
		return soap_in_mcu__Status(soap, NULL, NULL, "mcu:Status");
	case SOAP_TYPE_mcu__getVersion:
		return soap_in_mcu__getVersion(soap, NULL, NULL, "mcu:getVersion");
	case SOAP_TYPE_mcu__VersionResponse:
		return soap_in_mcu__VersionResponse(soap, NULL, NULL, "mcu:VersionResponse");
	case SOAP_TYPE_mcu__Version:
		return soap_in_mcu__Version(soap, NULL, NULL, "mcu:Version");
	case SOAP_TYPE_PointerTomcu__Conference:
		return soap_in_PointerTomcu__Conference(soap, NULL, NULL, "mcu:Conference");
	case SOAP_TYPE_PointerTomcu__Member:
		return soap_in_PointerTomcu__Member(soap, NULL, NULL, "mcu:Member");
	case SOAP_TYPE_PointerTomcu__VideoSink:
		return soap_in_PointerTomcu__VideoSink(soap, NULL, NULL, "mcu:VideoSink");
	case SOAP_TYPE_PointerTomcu__VideoSource:
		return soap_in_PointerTomcu__VideoSource(soap, NULL, NULL, "mcu:VideoSource");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:listConferences"))
		{	*type = SOAP_TYPE_mcu__listConferences;
			return soap_in_mcu__listConferences(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:listConferencesResponse"))
		{	*type = SOAP_TYPE_mcu__listConferencesResponse;
			return soap_in_mcu__listConferencesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:delConference"))
		{	*type = SOAP_TYPE_mcu__delConference;
			return soap_in_mcu__delConference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:addConference"))
		{	*type = SOAP_TYPE_mcu__addConference;
			return soap_in_mcu__addConference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:ConferenceArrayResponse"))
		{	*type = SOAP_TYPE_mcu__ConferenceArrayResponse;
			return soap_in_mcu__ConferenceArrayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:ConferenceArray"))
		{	*type = SOAP_TYPE_mcu__ConferenceArray;
			return soap_in_mcu__ConferenceArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:ConferenceResponse"))
		{	*type = SOAP_TYPE_mcu__ConferenceResponse;
			return soap_in_mcu__ConferenceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:Conference"))
		{	*type = SOAP_TYPE_mcu__Conference;
			return soap_in_mcu__Conference(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:enableSound"))
		{	*type = SOAP_TYPE_mcu__enableSound;
			return soap_in_mcu__enableSound(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:enableSoundResponse"))
		{	*type = SOAP_TYPE_mcu__enableSoundResponse;
			return soap_in_mcu__enableSoundResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:delMember"))
		{	*type = SOAP_TYPE_mcu__delMember;
			return soap_in_mcu__delMember(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:addMember"))
		{	*type = SOAP_TYPE_mcu__addMember;
			return soap_in_mcu__addMember(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:MemberArray"))
		{	*type = SOAP_TYPE_mcu__MemberArray;
			return soap_in_mcu__MemberArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:MemberResponse"))
		{	*type = SOAP_TYPE_mcu__MemberResponse;
			return soap_in_mcu__MemberResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:Member"))
		{	*type = SOAP_TYPE_mcu__Member;
			return soap_in_mcu__Member(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:delAudioStream"))
		{	*type = SOAP_TYPE_mcu__delAudioStream;
			return soap_in_mcu__delAudioStream(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:addAudioStream"))
		{	*type = SOAP_TYPE_mcu__addAudioStream;
			return soap_in_mcu__addAudioStream(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:AudioStreamResponse"))
		{	*type = SOAP_TYPE_mcu__AudioStreamResponse;
			return soap_in_mcu__AudioStreamResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:AudioStream"))
		{	*type = SOAP_TYPE_mcu__AudioStream;
			return soap_in_mcu__AudioStream(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:delVideoSink"))
		{	*type = SOAP_TYPE_mcu__delVideoSink;
			return soap_in_mcu__delVideoSink(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:addVideoSink"))
		{	*type = SOAP_TYPE_mcu__addVideoSink;
			return soap_in_mcu__addVideoSink(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:VideoSinkArray"))
		{	*type = SOAP_TYPE_mcu__VideoSinkArray;
			return soap_in_mcu__VideoSinkArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:VideoSinkResponse"))
		{	*type = SOAP_TYPE_mcu__VideoSinkResponse;
			return soap_in_mcu__VideoSinkResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:VideoSink"))
		{	*type = SOAP_TYPE_mcu__VideoSink;
			return soap_in_mcu__VideoSink(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:delVideoSource"))
		{	*type = SOAP_TYPE_mcu__delVideoSource;
			return soap_in_mcu__delVideoSource(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:addVideoSource"))
		{	*type = SOAP_TYPE_mcu__addVideoSource;
			return soap_in_mcu__addVideoSource(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:VideoSourceArray"))
		{	*type = SOAP_TYPE_mcu__VideoSourceArray;
			return soap_in_mcu__VideoSourceArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:VideoSourceResponse"))
		{	*type = SOAP_TYPE_mcu__VideoSourceResponse;
			return soap_in_mcu__VideoSourceResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:VideoSource"))
		{	*type = SOAP_TYPE_mcu__VideoSource;
			return soap_in_mcu__VideoSource(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:MediaEndpoint"))
		{	*type = SOAP_TYPE_mcu__MediaEndpoint;
			return soap_in_mcu__MediaEndpoint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:getStatus"))
		{	*type = SOAP_TYPE_mcu__getStatus;
			return soap_in_mcu__getStatus(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:StatusResponse"))
		{	*type = SOAP_TYPE_mcu__StatusResponse;
			return soap_in_mcu__StatusResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:Status"))
		{	*type = SOAP_TYPE_mcu__Status;
			return soap_in_mcu__Status(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:getVersion"))
		{	*type = SOAP_TYPE_mcu__getVersion;
			return soap_in_mcu__getVersion(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:VersionResponse"))
		{	*type = SOAP_TYPE_mcu__VersionResponse;
			return soap_in_mcu__VersionResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "mcu:Version"))
		{	*type = SOAP_TYPE_mcu__Version;
			return soap_in_mcu__Version(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_mcu__listConferences:
		return soap_out_mcu__listConferences(soap, tag, id, (const struct mcu__listConferences *)ptr, "mcu:listConferences");
	case SOAP_TYPE_mcu__listConferencesResponse:
		return soap_out_mcu__listConferencesResponse(soap, tag, id, (const struct mcu__listConferencesResponse *)ptr, "mcu:listConferencesResponse");
	case SOAP_TYPE_mcu__delConference:
		return soap_out_mcu__delConference(soap, tag, id, (const struct mcu__delConference *)ptr, "mcu:delConference");
	case SOAP_TYPE_mcu__addConference:
		return soap_out_mcu__addConference(soap, tag, id, (const struct mcu__addConference *)ptr, "mcu:addConference");
	case SOAP_TYPE_mcu__ConferenceArrayResponse:
		return soap_out_mcu__ConferenceArrayResponse(soap, tag, id, (const struct mcu__ConferenceArray *)ptr, "mcu:ConferenceArrayResponse");
	case SOAP_TYPE_mcu__ConferenceArray:
		return soap_out_mcu__ConferenceArray(soap, tag, id, (const struct mcu__ConferenceArray *)ptr, "mcu:ConferenceArray");
	case SOAP_TYPE_mcu__ConferenceResponse:
		return soap_out_mcu__ConferenceResponse(soap, tag, id, (const struct mcu__Conference *)ptr, "mcu:ConferenceResponse");
	case SOAP_TYPE_mcu__Conference:
		return soap_out_mcu__Conference(soap, tag, id, (const struct mcu__Conference *)ptr, "mcu:Conference");
	case SOAP_TYPE_mcu__enableSound:
		return soap_out_mcu__enableSound(soap, tag, id, (const struct mcu__enableSound *)ptr, "mcu:enableSound");
	case SOAP_TYPE_mcu__enableSoundResponse:
		return soap_out_mcu__enableSoundResponse(soap, tag, id, (const struct mcu__enableSoundResponse *)ptr, "mcu:enableSoundResponse");
	case SOAP_TYPE_mcu__delMember:
		return soap_out_mcu__delMember(soap, tag, id, (const struct mcu__delMember *)ptr, "mcu:delMember");
	case SOAP_TYPE_mcu__addMember:
		return soap_out_mcu__addMember(soap, tag, id, (const struct mcu__addMember *)ptr, "mcu:addMember");
	case SOAP_TYPE_mcu__MemberArray:
		return soap_out_mcu__MemberArray(soap, tag, id, (const struct mcu__MemberArray *)ptr, "mcu:MemberArray");
	case SOAP_TYPE_mcu__MemberResponse:
		return soap_out_mcu__MemberResponse(soap, tag, id, (const struct mcu__Member *)ptr, "mcu:MemberResponse");
	case SOAP_TYPE_mcu__Member:
		return soap_out_mcu__Member(soap, tag, id, (const struct mcu__Member *)ptr, "mcu:Member");
	case SOAP_TYPE_mcu__delAudioStream:
		return soap_out_mcu__delAudioStream(soap, tag, id, (const struct mcu__delAudioStream *)ptr, "mcu:delAudioStream");
	case SOAP_TYPE_mcu__addAudioStream:
		return soap_out_mcu__addAudioStream(soap, tag, id, (const struct mcu__addAudioStream *)ptr, "mcu:addAudioStream");
	case SOAP_TYPE_mcu__AudioStreamResponse:
		return soap_out_mcu__AudioStreamResponse(soap, tag, id, (const struct mcu__AudioStream *)ptr, "mcu:AudioStreamResponse");
	case SOAP_TYPE_mcu__AudioStream:
		return soap_out_mcu__AudioStream(soap, tag, id, (const struct mcu__AudioStream *)ptr, "mcu:AudioStream");
	case SOAP_TYPE_mcu__delVideoSink:
		return soap_out_mcu__delVideoSink(soap, tag, id, (const struct mcu__delVideoSink *)ptr, "mcu:delVideoSink");
	case SOAP_TYPE_mcu__addVideoSink:
		return soap_out_mcu__addVideoSink(soap, tag, id, (const struct mcu__addVideoSink *)ptr, "mcu:addVideoSink");
	case SOAP_TYPE_mcu__VideoSinkArray:
		return soap_out_mcu__VideoSinkArray(soap, tag, id, (const struct mcu__VideoSinkArray *)ptr, "mcu:VideoSinkArray");
	case SOAP_TYPE_mcu__VideoSinkResponse:
		return soap_out_mcu__VideoSinkResponse(soap, tag, id, (const struct mcu__VideoSink *)ptr, "mcu:VideoSinkResponse");
	case SOAP_TYPE_mcu__VideoSink:
		return soap_out_mcu__VideoSink(soap, tag, id, (const struct mcu__VideoSink *)ptr, "mcu:VideoSink");
	case SOAP_TYPE_mcu__delVideoSource:
		return soap_out_mcu__delVideoSource(soap, tag, id, (const struct mcu__delVideoSource *)ptr, "mcu:delVideoSource");
	case SOAP_TYPE_mcu__addVideoSource:
		return soap_out_mcu__addVideoSource(soap, tag, id, (const struct mcu__addVideoSource *)ptr, "mcu:addVideoSource");
	case SOAP_TYPE_mcu__VideoSourceArray:
		return soap_out_mcu__VideoSourceArray(soap, tag, id, (const struct mcu__VideoSourceArray *)ptr, "mcu:VideoSourceArray");
	case SOAP_TYPE_mcu__VideoSourceResponse:
		return soap_out_mcu__VideoSourceResponse(soap, tag, id, (const struct mcu__VideoSource *)ptr, "mcu:VideoSourceResponse");
	case SOAP_TYPE_mcu__VideoSource:
		return soap_out_mcu__VideoSource(soap, tag, id, (const struct mcu__VideoSource *)ptr, "mcu:VideoSource");
	case SOAP_TYPE_mcu__MediaEndpoint:
		return soap_out_mcu__MediaEndpoint(soap, tag, id, (const struct mcu__MediaEndpoint *)ptr, "mcu:MediaEndpoint");
	case SOAP_TYPE_mcu__getStatus:
		return soap_out_mcu__getStatus(soap, tag, id, (const struct mcu__getStatus *)ptr, "mcu:getStatus");
	case SOAP_TYPE_mcu__StatusResponse:
		return soap_out_mcu__StatusResponse(soap, tag, id, (const struct mcu__Status *)ptr, "mcu:StatusResponse");
	case SOAP_TYPE_mcu__Status:
		return soap_out_mcu__Status(soap, tag, id, (const struct mcu__Status *)ptr, "mcu:Status");
	case SOAP_TYPE_mcu__getVersion:
		return soap_out_mcu__getVersion(soap, tag, id, (const struct mcu__getVersion *)ptr, "mcu:getVersion");
	case SOAP_TYPE_mcu__VersionResponse:
		return soap_out_mcu__VersionResponse(soap, tag, id, (const struct mcu__Version *)ptr, "mcu:VersionResponse");
	case SOAP_TYPE_mcu__Version:
		return soap_out_mcu__Version(soap, tag, id, (const struct mcu__Version *)ptr, "mcu:Version");
	case SOAP_TYPE_PointerTomcu__Conference:
		return soap_out_PointerTomcu__Conference(soap, tag, id, (struct mcu__Conference *const*)ptr, "mcu:Conference");
	case SOAP_TYPE_PointerTomcu__Member:
		return soap_out_PointerTomcu__Member(soap, tag, id, (struct mcu__Member *const*)ptr, "mcu:Member");
	case SOAP_TYPE_PointerTomcu__VideoSink:
		return soap_out_PointerTomcu__VideoSink(soap, tag, id, (struct mcu__VideoSink *const*)ptr, "mcu:VideoSink");
	case SOAP_TYPE_PointerTomcu__VideoSource:
		return soap_out_PointerTomcu__VideoSource(soap, tag, id, (struct mcu__VideoSource *const*)ptr, "mcu:VideoSource");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_mcu__listConferences:
		soap_serialize_mcu__listConferences(soap, (const struct mcu__listConferences *)ptr);
		break;
	case SOAP_TYPE_mcu__listConferencesResponse:
		soap_serialize_mcu__listConferencesResponse(soap, (const struct mcu__listConferencesResponse *)ptr);
		break;
	case SOAP_TYPE_mcu__delConference:
		soap_serialize_mcu__delConference(soap, (const struct mcu__delConference *)ptr);
		break;
	case SOAP_TYPE_mcu__addConference:
		soap_serialize_mcu__addConference(soap, (const struct mcu__addConference *)ptr);
		break;
	case SOAP_TYPE_mcu__ConferenceArrayResponse:
		soap_serialize_mcu__ConferenceArrayResponse(soap, (const struct mcu__ConferenceArray *)ptr);
		break;
	case SOAP_TYPE_mcu__ConferenceArray:
		soap_serialize_mcu__ConferenceArray(soap, (const struct mcu__ConferenceArray *)ptr);
		break;
	case SOAP_TYPE_mcu__ConferenceResponse:
		soap_serialize_mcu__ConferenceResponse(soap, (const struct mcu__Conference *)ptr);
		break;
	case SOAP_TYPE_mcu__Conference:
		soap_serialize_mcu__Conference(soap, (const struct mcu__Conference *)ptr);
		break;
	case SOAP_TYPE_mcu__enableSound:
		soap_serialize_mcu__enableSound(soap, (const struct mcu__enableSound *)ptr);
		break;
	case SOAP_TYPE_mcu__enableSoundResponse:
		soap_serialize_mcu__enableSoundResponse(soap, (const struct mcu__enableSoundResponse *)ptr);
		break;
	case SOAP_TYPE_mcu__delMember:
		soap_serialize_mcu__delMember(soap, (const struct mcu__delMember *)ptr);
		break;
	case SOAP_TYPE_mcu__addMember:
		soap_serialize_mcu__addMember(soap, (const struct mcu__addMember *)ptr);
		break;
	case SOAP_TYPE_mcu__MemberArray:
		soap_serialize_mcu__MemberArray(soap, (const struct mcu__MemberArray *)ptr);
		break;
	case SOAP_TYPE_mcu__MemberResponse:
		soap_serialize_mcu__MemberResponse(soap, (const struct mcu__Member *)ptr);
		break;
	case SOAP_TYPE_mcu__Member:
		soap_serialize_mcu__Member(soap, (const struct mcu__Member *)ptr);
		break;
	case SOAP_TYPE_mcu__delAudioStream:
		soap_serialize_mcu__delAudioStream(soap, (const struct mcu__delAudioStream *)ptr);
		break;
	case SOAP_TYPE_mcu__addAudioStream:
		soap_serialize_mcu__addAudioStream(soap, (const struct mcu__addAudioStream *)ptr);
		break;
	case SOAP_TYPE_mcu__AudioStreamResponse:
		soap_serialize_mcu__AudioStreamResponse(soap, (const struct mcu__AudioStream *)ptr);
		break;
	case SOAP_TYPE_mcu__AudioStream:
		soap_serialize_mcu__AudioStream(soap, (const struct mcu__AudioStream *)ptr);
		break;
	case SOAP_TYPE_mcu__delVideoSink:
		soap_serialize_mcu__delVideoSink(soap, (const struct mcu__delVideoSink *)ptr);
		break;
	case SOAP_TYPE_mcu__addVideoSink:
		soap_serialize_mcu__addVideoSink(soap, (const struct mcu__addVideoSink *)ptr);
		break;
	case SOAP_TYPE_mcu__VideoSinkArray:
		soap_serialize_mcu__VideoSinkArray(soap, (const struct mcu__VideoSinkArray *)ptr);
		break;
	case SOAP_TYPE_mcu__VideoSinkResponse:
		soap_serialize_mcu__VideoSinkResponse(soap, (const struct mcu__VideoSink *)ptr);
		break;
	case SOAP_TYPE_mcu__VideoSink:
		soap_serialize_mcu__VideoSink(soap, (const struct mcu__VideoSink *)ptr);
		break;
	case SOAP_TYPE_mcu__delVideoSource:
		soap_serialize_mcu__delVideoSource(soap, (const struct mcu__delVideoSource *)ptr);
		break;
	case SOAP_TYPE_mcu__addVideoSource:
		soap_serialize_mcu__addVideoSource(soap, (const struct mcu__addVideoSource *)ptr);
		break;
	case SOAP_TYPE_mcu__VideoSourceArray:
		soap_serialize_mcu__VideoSourceArray(soap, (const struct mcu__VideoSourceArray *)ptr);
		break;
	case SOAP_TYPE_mcu__VideoSourceResponse:
		soap_serialize_mcu__VideoSourceResponse(soap, (const struct mcu__VideoSource *)ptr);
		break;
	case SOAP_TYPE_mcu__VideoSource:
		soap_serialize_mcu__VideoSource(soap, (const struct mcu__VideoSource *)ptr);
		break;
	case SOAP_TYPE_mcu__MediaEndpoint:
		soap_serialize_mcu__MediaEndpoint(soap, (const struct mcu__MediaEndpoint *)ptr);
		break;
	case SOAP_TYPE_mcu__getStatus:
		soap_serialize_mcu__getStatus(soap, (const struct mcu__getStatus *)ptr);
		break;
	case SOAP_TYPE_mcu__StatusResponse:
		soap_serialize_mcu__StatusResponse(soap, (const struct mcu__Status *)ptr);
		break;
	case SOAP_TYPE_mcu__Status:
		soap_serialize_mcu__Status(soap, (const struct mcu__Status *)ptr);
		break;
	case SOAP_TYPE_mcu__getVersion:
		soap_serialize_mcu__getVersion(soap, (const struct mcu__getVersion *)ptr);
		break;
	case SOAP_TYPE_mcu__VersionResponse:
		soap_serialize_mcu__VersionResponse(soap, (const struct mcu__Version *)ptr);
		break;
	case SOAP_TYPE_mcu__Version:
		soap_serialize_mcu__Version(soap, (const struct mcu__Version *)ptr);
		break;
	case SOAP_TYPE_PointerTomcu__Conference:
		soap_serialize_PointerTomcu__Conference(soap, (struct mcu__Conference *const*)ptr);
		break;
	case SOAP_TYPE_PointerTomcu__Member:
		soap_serialize_PointerTomcu__Member(soap, (struct mcu__Member *const*)ptr);
		break;
	case SOAP_TYPE_PointerTomcu__VideoSink:
		soap_serialize_PointerTomcu__VideoSink(soap, (struct mcu__VideoSink *const*)ptr);
		break;
	case SOAP_TYPE_PointerTomcu__VideoSource:
		soap_serialize_PointerTomcu__VideoSource(soap, (struct mcu__VideoSource *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_mcu__Version:
		return (void*)soap_instantiate_mcu__Version(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__getVersion:
		return (void*)soap_instantiate_mcu__getVersion(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__Status:
		return (void*)soap_instantiate_mcu__Status(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__getStatus:
		return (void*)soap_instantiate_mcu__getStatus(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__MediaEndpoint:
		return (void*)soap_instantiate_mcu__MediaEndpoint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__VideoSource:
		return (void*)soap_instantiate_mcu__VideoSource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__VideoSourceArray:
		return (void*)soap_instantiate_mcu__VideoSourceArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__addVideoSource:
		return (void*)soap_instantiate_mcu__addVideoSource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__delVideoSource:
		return (void*)soap_instantiate_mcu__delVideoSource(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__VideoSink:
		return (void*)soap_instantiate_mcu__VideoSink(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__VideoSinkArray:
		return (void*)soap_instantiate_mcu__VideoSinkArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__addVideoSink:
		return (void*)soap_instantiate_mcu__addVideoSink(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__delVideoSink:
		return (void*)soap_instantiate_mcu__delVideoSink(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__AudioStream:
		return (void*)soap_instantiate_mcu__AudioStream(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__addAudioStream:
		return (void*)soap_instantiate_mcu__addAudioStream(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__delAudioStream:
		return (void*)soap_instantiate_mcu__delAudioStream(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__Member:
		return (void*)soap_instantiate_mcu__Member(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__MemberArray:
		return (void*)soap_instantiate_mcu__MemberArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__addMember:
		return (void*)soap_instantiate_mcu__addMember(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__delMember:
		return (void*)soap_instantiate_mcu__delMember(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__enableSoundResponse:
		return (void*)soap_instantiate_mcu__enableSoundResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__enableSound:
		return (void*)soap_instantiate_mcu__enableSound(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__Conference:
		return (void*)soap_instantiate_mcu__Conference(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__ConferenceArray:
		return (void*)soap_instantiate_mcu__ConferenceArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__addConference:
		return (void*)soap_instantiate_mcu__addConference(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__delConference:
		return (void*)soap_instantiate_mcu__delConference(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__listConferencesResponse:
		return (void*)soap_instantiate_mcu__listConferencesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__listConferences:
		return (void*)soap_instantiate_mcu__listConferences(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_mcu__VersionResponse:
		return (void*)soap_instantiate_mcu__VersionResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__StatusResponse:
		return (void*)soap_instantiate_mcu__StatusResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__VideoSourceResponse:
		return (void*)soap_instantiate_mcu__VideoSourceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__VideoSinkResponse:
		return (void*)soap_instantiate_mcu__VideoSinkResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__AudioStreamResponse:
		return (void*)soap_instantiate_mcu__AudioStreamResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__MemberResponse:
		return (void*)soap_instantiate_mcu__MemberResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__ConferenceResponse:
		return (void*)soap_instantiate_mcu__ConferenceResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_mcu__ConferenceArrayResponse:
		return (void*)soap_instantiate_mcu__ConferenceArrayResponse(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_mcu__Version:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__Version*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__Version*)p->ptr);
		break;
	case SOAP_TYPE_mcu__getVersion:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__getVersion*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__getVersion*)p->ptr);
		break;
	case SOAP_TYPE_mcu__Status:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__Status*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__Status*)p->ptr);
		break;
	case SOAP_TYPE_mcu__getStatus:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__getStatus*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__getStatus*)p->ptr);
		break;
	case SOAP_TYPE_mcu__MediaEndpoint:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__MediaEndpoint*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__MediaEndpoint*)p->ptr);
		break;
	case SOAP_TYPE_mcu__VideoSource:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__VideoSource*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__VideoSource*)p->ptr);
		break;
	case SOAP_TYPE_mcu__VideoSourceArray:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__VideoSourceArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__VideoSourceArray*)p->ptr);
		break;
	case SOAP_TYPE_mcu__addVideoSource:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__addVideoSource*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__addVideoSource*)p->ptr);
		break;
	case SOAP_TYPE_mcu__delVideoSource:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__delVideoSource*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__delVideoSource*)p->ptr);
		break;
	case SOAP_TYPE_mcu__VideoSink:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__VideoSink*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__VideoSink*)p->ptr);
		break;
	case SOAP_TYPE_mcu__VideoSinkArray:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__VideoSinkArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__VideoSinkArray*)p->ptr);
		break;
	case SOAP_TYPE_mcu__addVideoSink:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__addVideoSink*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__addVideoSink*)p->ptr);
		break;
	case SOAP_TYPE_mcu__delVideoSink:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__delVideoSink*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__delVideoSink*)p->ptr);
		break;
	case SOAP_TYPE_mcu__AudioStream:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__AudioStream*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__AudioStream*)p->ptr);
		break;
	case SOAP_TYPE_mcu__addAudioStream:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__addAudioStream*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__addAudioStream*)p->ptr);
		break;
	case SOAP_TYPE_mcu__delAudioStream:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__delAudioStream*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__delAudioStream*)p->ptr);
		break;
	case SOAP_TYPE_mcu__Member:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__Member*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__Member*)p->ptr);
		break;
	case SOAP_TYPE_mcu__MemberArray:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__MemberArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__MemberArray*)p->ptr);
		break;
	case SOAP_TYPE_mcu__addMember:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__addMember*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__addMember*)p->ptr);
		break;
	case SOAP_TYPE_mcu__delMember:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__delMember*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__delMember*)p->ptr);
		break;
	case SOAP_TYPE_mcu__enableSoundResponse:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__enableSoundResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__enableSoundResponse*)p->ptr);
		break;
	case SOAP_TYPE_mcu__enableSound:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__enableSound*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__enableSound*)p->ptr);
		break;
	case SOAP_TYPE_mcu__Conference:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__Conference*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__Conference*)p->ptr);
		break;
	case SOAP_TYPE_mcu__ConferenceArray:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__ConferenceArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__ConferenceArray*)p->ptr);
		break;
	case SOAP_TYPE_mcu__addConference:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__addConference*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__addConference*)p->ptr);
		break;
	case SOAP_TYPE_mcu__delConference:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__delConference*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__delConference*)p->ptr);
		break;
	case SOAP_TYPE_mcu__listConferencesResponse:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__listConferencesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__listConferencesResponse*)p->ptr);
		break;
	case SOAP_TYPE_mcu__listConferences:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__listConferences*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__listConferences*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_mcu__VersionResponse:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__Version*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__Version*)p->ptr);
		break;
	case SOAP_TYPE_mcu__StatusResponse:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__Status*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__Status*)p->ptr);
		break;
	case SOAP_TYPE_mcu__VideoSourceResponse:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__VideoSource*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__VideoSource*)p->ptr);
		break;
	case SOAP_TYPE_mcu__VideoSinkResponse:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__VideoSink*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__VideoSink*)p->ptr);
		break;
	case SOAP_TYPE_mcu__AudioStreamResponse:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__AudioStream*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__AudioStream*)p->ptr);
		break;
	case SOAP_TYPE_mcu__MemberResponse:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__Member*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__Member*)p->ptr);
		break;
	case SOAP_TYPE_mcu__ConferenceResponse:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__Conference*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__Conference*)p->ptr);
		break;
	case SOAP_TYPE_mcu__ConferenceArrayResponse:
		if (p->size < 0)
			SOAP_DELETE((struct mcu__ConferenceArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct mcu__ConferenceArray*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__listConferences(struct soap *soap, struct mcu__listConferences *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _param_9 skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__listConferences(struct soap *soap, const struct mcu__listConferences *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _param_9 skipped */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__listConferences(struct soap *soap, const char *tag, int id, const struct mcu__listConferences *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__listConferences), type))
		return soap->error;
	/* transient _param_9 skipped */
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__listConferences * SOAP_FMAC4 soap_in_mcu__listConferences(struct soap *soap, const char *tag, struct mcu__listConferences *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__listConferences *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__listConferences, sizeof(struct mcu__listConferences), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__listConferences(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _param_9 skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__listConferences *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__listConferences, 0, sizeof(struct mcu__listConferences), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__listConferences(struct soap *soap, const struct mcu__listConferences *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__listConferences);
	if (soap_out_mcu__listConferences(soap, tag?tag:"mcu:listConferences", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__listConferences * SOAP_FMAC4 soap_get_mcu__listConferences(struct soap *soap, struct mcu__listConferences *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__listConferences(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__listConferences * SOAP_FMAC2 soap_instantiate_mcu__listConferences(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__listConferences(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__listConferences, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__listConferences);
		if (size)
			*size = sizeof(struct mcu__listConferences);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__listConferences, n);
		if (size)
			*size = n * sizeof(struct mcu__listConferences);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__listConferences*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__listConferences(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__listConferences %p -> %p\n", q, p));
	*(struct mcu__listConferences*)p = *(struct mcu__listConferences*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__listConferencesResponse(struct soap *soap, struct mcu__listConferencesResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_mcu__ConferenceArrayResponse(soap, &a->res);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__listConferencesResponse(struct soap *soap, const struct mcu__listConferencesResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_mcu__ConferenceArrayResponse(soap, &a->res);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__listConferencesResponse(struct soap *soap, const char *tag, int id, const struct mcu__listConferencesResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__listConferencesResponse), type))
		return soap->error;
	if (soap_out_mcu__ConferenceArrayResponse(soap, "res", -1, &a->res, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__listConferencesResponse * SOAP_FMAC4 soap_in_mcu__listConferencesResponse(struct soap *soap, const char *tag, struct mcu__listConferencesResponse *a, const char *type)
{
	size_t soap_flag_res = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__listConferencesResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__listConferencesResponse, sizeof(struct mcu__listConferencesResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__listConferencesResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_res && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mcu__ConferenceArrayResponse(soap, "res", &a->res, "mcu:ConferenceArrayResponse"))
				{	soap_flag_res--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__listConferencesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__listConferencesResponse, 0, sizeof(struct mcu__listConferencesResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_res > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__listConferencesResponse(struct soap *soap, const struct mcu__listConferencesResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__listConferencesResponse);
	if (soap_out_mcu__listConferencesResponse(soap, tag?tag:"mcu:listConferencesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__listConferencesResponse * SOAP_FMAC4 soap_get_mcu__listConferencesResponse(struct soap *soap, struct mcu__listConferencesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__listConferencesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__listConferencesResponse * SOAP_FMAC2 soap_instantiate_mcu__listConferencesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__listConferencesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__listConferencesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__listConferencesResponse);
		if (size)
			*size = sizeof(struct mcu__listConferencesResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__listConferencesResponse, n);
		if (size)
			*size = n * sizeof(struct mcu__listConferencesResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__listConferencesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__listConferencesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__listConferencesResponse %p -> %p\n", q, p));
	*(struct mcu__listConferencesResponse*)p = *(struct mcu__listConferencesResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__delConference(struct soap *soap, struct mcu__delConference *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->confid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__delConference(struct soap *soap, const struct mcu__delConference *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__delConference(struct soap *soap, const char *tag, int id, const struct mcu__delConference *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__delConference), type))
		return soap->error;
	if (soap_out_int(soap, "confid", -1, &a->confid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__delConference * SOAP_FMAC4 soap_in_mcu__delConference(struct soap *soap, const char *tag, struct mcu__delConference *a, const char *type)
{
	size_t soap_flag_confid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__delConference *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__delConference, sizeof(struct mcu__delConference), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__delConference(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_confid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "confid", &a->confid, "xsd:int"))
				{	soap_flag_confid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__delConference *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__delConference, 0, sizeof(struct mcu__delConference), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_confid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__delConference(struct soap *soap, const struct mcu__delConference *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__delConference);
	if (soap_out_mcu__delConference(soap, tag?tag:"mcu:delConference", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__delConference * SOAP_FMAC4 soap_get_mcu__delConference(struct soap *soap, struct mcu__delConference *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__delConference(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__delConference * SOAP_FMAC2 soap_instantiate_mcu__delConference(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__delConference(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__delConference, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__delConference);
		if (size)
			*size = sizeof(struct mcu__delConference);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__delConference, n);
		if (size)
			*size = n * sizeof(struct mcu__delConference);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__delConference*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__delConference(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__delConference %p -> %p\n", q, p));
	*(struct mcu__delConference*)p = *(struct mcu__delConference*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__addConference(struct soap *soap, struct mcu__addConference *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _param_7 skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__addConference(struct soap *soap, const struct mcu__addConference *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _param_7 skipped */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__addConference(struct soap *soap, const char *tag, int id, const struct mcu__addConference *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__addConference), type))
		return soap->error;
	/* transient _param_7 skipped */
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__addConference * SOAP_FMAC4 soap_in_mcu__addConference(struct soap *soap, const char *tag, struct mcu__addConference *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__addConference *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__addConference, sizeof(struct mcu__addConference), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__addConference(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _param_7 skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__addConference *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__addConference, 0, sizeof(struct mcu__addConference), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__addConference(struct soap *soap, const struct mcu__addConference *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__addConference);
	if (soap_out_mcu__addConference(soap, tag?tag:"mcu:addConference", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__addConference * SOAP_FMAC4 soap_get_mcu__addConference(struct soap *soap, struct mcu__addConference *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__addConference(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__addConference * SOAP_FMAC2 soap_instantiate_mcu__addConference(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__addConference(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__addConference, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__addConference);
		if (size)
			*size = sizeof(struct mcu__addConference);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__addConference, n);
		if (size)
			*size = n * sizeof(struct mcu__addConference);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__addConference*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__addConference(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__addConference %p -> %p\n", q, p));
	*(struct mcu__addConference*)p = *(struct mcu__addConference*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__ConferenceArrayResponse(struct soap *soap, struct mcu__ConferenceArray const*a)
{
#ifndef WITH_NOIDREF
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_mcu__ConferenceArrayResponse))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_mcu__Conference);
			soap_serialize_mcu__Conference(soap, a->__ptr + i);
		}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__ConferenceArrayResponse(struct soap *soap, const char *tag, int id, const struct mcu__ConferenceArray *a, const char *type)
{
	int i, n = a->__size;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_mcu__ConferenceArrayResponse);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap_out_mcu__Conference(soap, "item", -1, &a->__ptr[i], "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__ConferenceArray * SOAP_FMAC4 soap_in_mcu__ConferenceArrayResponse(struct soap *soap, const char *tag, struct mcu__ConferenceArray *a, const char *type)
{	int i, j;
	struct mcu__Conference *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_array(soap, "mcu:Conference") && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct mcu__ConferenceArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__ConferenceArrayResponse, sizeof(struct mcu__ConferenceArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__ConferenceArrayResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = soap_new_mcu__Conference(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_mcu__Conference(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_mcu__Conference(soap, NULL, a->__ptr + i, "mcu:Conference"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (struct mcu__Conference *)soap_push_block(soap, NULL, sizeof(struct mcu__Conference));
				if (!p)
					return NULL;
				SOAP_PLACEMENT_NEW(p, struct mcu__Conference);
				soap_default_mcu__Conference(soap, p);
				if (!soap_in_mcu__Conference(soap, NULL, p, "mcu:Conference"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			if (soap->blist->size)
				a->__ptr = soap_new_mcu__Conference(soap, soap->blist->size/sizeof(struct mcu__Conference));
			else
				a->__ptr = NULL;
			soap_save_block(soap, NULL, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__ConferenceArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__ConferenceArrayResponse, 0, sizeof(struct mcu__ConferenceArray), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__ConferenceArrayResponse(struct soap *soap, const struct mcu__ConferenceArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_mcu__ConferenceArrayResponse);
	if (soap_out_mcu__ConferenceArrayResponse(soap, tag?tag:"mcu:ConferenceArrayResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__ConferenceArray * SOAP_FMAC4 soap_get_mcu__ConferenceArrayResponse(struct soap *soap, struct mcu__ConferenceArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__ConferenceArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__ConferenceArray(struct soap *soap, struct mcu__ConferenceArray *a)
{	(void)soap;
	(void)soap; /* appease -Wall -Werror */
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__ConferenceArray(struct soap *soap, struct mcu__ConferenceArray const*a)
{
#ifndef WITH_NOIDREF
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_mcu__ConferenceArray))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_mcu__Conference);
			soap_serialize_mcu__Conference(soap, a->__ptr + i);
		}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__ConferenceArray(struct soap *soap, const char *tag, int id, const struct mcu__ConferenceArray *a, const char *type)
{
	int i, n = a->__size;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_mcu__ConferenceArray);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap_out_mcu__Conference(soap, "item", -1, &a->__ptr[i], "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__ConferenceArray * SOAP_FMAC4 soap_in_mcu__ConferenceArray(struct soap *soap, const char *tag, struct mcu__ConferenceArray *a, const char *type)
{	int i, j;
	struct mcu__Conference *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_array(soap, "mcu:Conference") && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct mcu__ConferenceArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__ConferenceArray, sizeof(struct mcu__ConferenceArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__ConferenceArray(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = soap_new_mcu__Conference(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_mcu__Conference(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_mcu__Conference(soap, NULL, a->__ptr + i, "mcu:Conference"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (struct mcu__Conference *)soap_push_block(soap, NULL, sizeof(struct mcu__Conference));
				if (!p)
					return NULL;
				SOAP_PLACEMENT_NEW(p, struct mcu__Conference);
				soap_default_mcu__Conference(soap, p);
				if (!soap_in_mcu__Conference(soap, NULL, p, "mcu:Conference"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			if (soap->blist->size)
				a->__ptr = soap_new_mcu__Conference(soap, soap->blist->size/sizeof(struct mcu__Conference));
			else
				a->__ptr = NULL;
			soap_save_block(soap, NULL, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__ConferenceArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__ConferenceArray, 0, sizeof(struct mcu__ConferenceArray), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__ConferenceArray(struct soap *soap, const struct mcu__ConferenceArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_mcu__ConferenceArray);
	if (soap_out_mcu__ConferenceArray(soap, tag?tag:"mcu:ConferenceArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__ConferenceArray * SOAP_FMAC4 soap_get_mcu__ConferenceArray(struct soap *soap, struct mcu__ConferenceArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__ConferenceArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__ConferenceArray * SOAP_FMAC2 soap_instantiate_mcu__ConferenceArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__ConferenceArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__ConferenceArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__ConferenceArray);
		if (size)
			*size = sizeof(struct mcu__ConferenceArray);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__ConferenceArray, n);
		if (size)
			*size = n * sizeof(struct mcu__ConferenceArray);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__ConferenceArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__ConferenceArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__ConferenceArray %p -> %p\n", q, p));
	*(struct mcu__ConferenceArray*)p = *(struct mcu__ConferenceArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__ConferenceResponse(struct soap *soap, const struct mcu__Conference *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->desc);
	soap_serialize_mcu__MemberArray(soap, &a->members);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__ConferenceResponse(struct soap *soap, const char *tag, int id, const struct mcu__Conference *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__ConferenceResponse), type))
		return soap->error;
	if (soap_out_int(soap, "confid", -1, &a->confid, ""))
		return soap->error;
	if (soap_out_string(soap, "desc", -1, &a->desc, ""))
		return soap->error;
	if (soap_out_mcu__MemberArray(soap, "members", -1, &a->members, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__Conference * SOAP_FMAC4 soap_in_mcu__ConferenceResponse(struct soap *soap, const char *tag, struct mcu__Conference *a, const char *type)
{
	size_t soap_flag_confid = 1;
	size_t soap_flag_desc = 1;
	size_t soap_flag_members = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__Conference *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__ConferenceResponse, sizeof(struct mcu__Conference), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__ConferenceResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_confid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "confid", &a->confid, "xsd:int"))
				{	soap_flag_confid--;
					continue;
				}
			if (soap_flag_desc && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "desc", &a->desc, "xsd:string"))
				{	soap_flag_desc--;
					continue;
				}
			if (soap_flag_members && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mcu__MemberArray(soap, "members", &a->members, "mcu:MemberArray"))
				{	soap_flag_members--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__Conference *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__ConferenceResponse, 0, sizeof(struct mcu__Conference), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_confid > 0 || soap_flag_members > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__ConferenceResponse(struct soap *soap, const struct mcu__Conference *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__ConferenceResponse);
	if (soap_out_mcu__ConferenceResponse(soap, tag?tag:"mcu:ConferenceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__Conference * SOAP_FMAC4 soap_get_mcu__ConferenceResponse(struct soap *soap, struct mcu__Conference *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__ConferenceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__Conference(struct soap *soap, struct mcu__Conference *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->confid);
	soap_default_string(soap, &a->desc);
	soap_default_mcu__MemberArray(soap, &a->members);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__Conference(struct soap *soap, const struct mcu__Conference *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->desc);
	soap_serialize_mcu__MemberArray(soap, &a->members);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__Conference(struct soap *soap, const char *tag, int id, const struct mcu__Conference *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__Conference), type))
		return soap->error;
	if (soap_out_int(soap, "confid", -1, &a->confid, ""))
		return soap->error;
	if (soap_out_string(soap, "desc", -1, &a->desc, ""))
		return soap->error;
	if (soap_out_mcu__MemberArray(soap, "members", -1, &a->members, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__Conference * SOAP_FMAC4 soap_in_mcu__Conference(struct soap *soap, const char *tag, struct mcu__Conference *a, const char *type)
{
	size_t soap_flag_confid = 1;
	size_t soap_flag_desc = 1;
	size_t soap_flag_members = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__Conference *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__Conference, sizeof(struct mcu__Conference), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__Conference(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_confid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "confid", &a->confid, "xsd:int"))
				{	soap_flag_confid--;
					continue;
				}
			if (soap_flag_desc && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "desc", &a->desc, "xsd:string"))
				{	soap_flag_desc--;
					continue;
				}
			if (soap_flag_members && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mcu__MemberArray(soap, "members", &a->members, "mcu:MemberArray"))
				{	soap_flag_members--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__Conference *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__Conference, 0, sizeof(struct mcu__Conference), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_confid > 0 || soap_flag_members > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__Conference(struct soap *soap, const struct mcu__Conference *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__Conference);
	if (soap_out_mcu__Conference(soap, tag?tag:"mcu:Conference", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__Conference * SOAP_FMAC4 soap_get_mcu__Conference(struct soap *soap, struct mcu__Conference *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__Conference(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__Conference * SOAP_FMAC2 soap_instantiate_mcu__Conference(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__Conference(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__Conference, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__Conference);
		if (size)
			*size = sizeof(struct mcu__Conference);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__Conference, n);
		if (size)
			*size = n * sizeof(struct mcu__Conference);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__Conference*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__Conference(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__Conference %p -> %p\n", q, p));
	*(struct mcu__Conference*)p = *(struct mcu__Conference*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__enableSound(struct soap *soap, struct mcu__enableSound *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->confid);
	soap_default_int(soap, &a->memberid);
	soap_default_int(soap, &a->enable);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__enableSound(struct soap *soap, const struct mcu__enableSound *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__enableSound(struct soap *soap, const char *tag, int id, const struct mcu__enableSound *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__enableSound), type))
		return soap->error;
	if (soap_out_int(soap, "confid", -1, &a->confid, ""))
		return soap->error;
	if (soap_out_int(soap, "memberid", -1, &a->memberid, ""))
		return soap->error;
	if (soap_out_int(soap, "enable", -1, &a->enable, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__enableSound * SOAP_FMAC4 soap_in_mcu__enableSound(struct soap *soap, const char *tag, struct mcu__enableSound *a, const char *type)
{
	size_t soap_flag_confid = 1;
	size_t soap_flag_memberid = 1;
	size_t soap_flag_enable = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__enableSound *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__enableSound, sizeof(struct mcu__enableSound), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__enableSound(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_confid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "confid", &a->confid, "xsd:int"))
				{	soap_flag_confid--;
					continue;
				}
			if (soap_flag_memberid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "memberid", &a->memberid, "xsd:int"))
				{	soap_flag_memberid--;
					continue;
				}
			if (soap_flag_enable && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "enable", &a->enable, "xsd:int"))
				{	soap_flag_enable--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__enableSound *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__enableSound, 0, sizeof(struct mcu__enableSound), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_confid > 0 || soap_flag_memberid > 0 || soap_flag_enable > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__enableSound(struct soap *soap, const struct mcu__enableSound *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__enableSound);
	if (soap_out_mcu__enableSound(soap, tag?tag:"mcu:enableSound", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__enableSound * SOAP_FMAC4 soap_get_mcu__enableSound(struct soap *soap, struct mcu__enableSound *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__enableSound(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__enableSound * SOAP_FMAC2 soap_instantiate_mcu__enableSound(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__enableSound(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__enableSound, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__enableSound);
		if (size)
			*size = sizeof(struct mcu__enableSound);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__enableSound, n);
		if (size)
			*size = n * sizeof(struct mcu__enableSound);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__enableSound*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__enableSound(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__enableSound %p -> %p\n", q, p));
	*(struct mcu__enableSound*)p = *(struct mcu__enableSound*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__enableSoundResponse(struct soap *soap, struct mcu__enableSoundResponse *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->res);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__enableSoundResponse(struct soap *soap, const struct mcu__enableSoundResponse *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__enableSoundResponse(struct soap *soap, const char *tag, int id, const struct mcu__enableSoundResponse *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__enableSoundResponse), type))
		return soap->error;
	if (soap_out_int(soap, "res", -1, &a->res, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__enableSoundResponse * SOAP_FMAC4 soap_in_mcu__enableSoundResponse(struct soap *soap, const char *tag, struct mcu__enableSoundResponse *a, const char *type)
{
	size_t soap_flag_res = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__enableSoundResponse *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__enableSoundResponse, sizeof(struct mcu__enableSoundResponse), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__enableSoundResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_res && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "res", &a->res, "xsd:int"))
				{	soap_flag_res--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__enableSoundResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__enableSoundResponse, 0, sizeof(struct mcu__enableSoundResponse), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_res > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__enableSoundResponse(struct soap *soap, const struct mcu__enableSoundResponse *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__enableSoundResponse);
	if (soap_out_mcu__enableSoundResponse(soap, tag?tag:"mcu:enableSoundResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__enableSoundResponse * SOAP_FMAC4 soap_get_mcu__enableSoundResponse(struct soap *soap, struct mcu__enableSoundResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__enableSoundResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__enableSoundResponse * SOAP_FMAC2 soap_instantiate_mcu__enableSoundResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__enableSoundResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__enableSoundResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__enableSoundResponse);
		if (size)
			*size = sizeof(struct mcu__enableSoundResponse);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__enableSoundResponse, n);
		if (size)
			*size = n * sizeof(struct mcu__enableSoundResponse);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__enableSoundResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__enableSoundResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__enableSoundResponse %p -> %p\n", q, p));
	*(struct mcu__enableSoundResponse*)p = *(struct mcu__enableSoundResponse*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__delMember(struct soap *soap, struct mcu__delMember *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->confid);
	soap_default_int(soap, &a->memberid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__delMember(struct soap *soap, const struct mcu__delMember *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__delMember(struct soap *soap, const char *tag, int id, const struct mcu__delMember *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__delMember), type))
		return soap->error;
	if (soap_out_int(soap, "confid", -1, &a->confid, ""))
		return soap->error;
	if (soap_out_int(soap, "memberid", -1, &a->memberid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__delMember * SOAP_FMAC4 soap_in_mcu__delMember(struct soap *soap, const char *tag, struct mcu__delMember *a, const char *type)
{
	size_t soap_flag_confid = 1;
	size_t soap_flag_memberid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__delMember *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__delMember, sizeof(struct mcu__delMember), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__delMember(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_confid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "confid", &a->confid, "xsd:int"))
				{	soap_flag_confid--;
					continue;
				}
			if (soap_flag_memberid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "memberid", &a->memberid, "xsd:int"))
				{	soap_flag_memberid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__delMember *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__delMember, 0, sizeof(struct mcu__delMember), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_confid > 0 || soap_flag_memberid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__delMember(struct soap *soap, const struct mcu__delMember *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__delMember);
	if (soap_out_mcu__delMember(soap, tag?tag:"mcu:delMember", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__delMember * SOAP_FMAC4 soap_get_mcu__delMember(struct soap *soap, struct mcu__delMember *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__delMember(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__delMember * SOAP_FMAC2 soap_instantiate_mcu__delMember(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__delMember(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__delMember, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__delMember);
		if (size)
			*size = sizeof(struct mcu__delMember);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__delMember, n);
		if (size)
			*size = n * sizeof(struct mcu__delMember);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__delMember*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__delMember(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__delMember %p -> %p\n", q, p));
	*(struct mcu__delMember*)p = *(struct mcu__delMember*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__addMember(struct soap *soap, struct mcu__addMember *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->confid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__addMember(struct soap *soap, const struct mcu__addMember *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__addMember(struct soap *soap, const char *tag, int id, const struct mcu__addMember *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__addMember), type))
		return soap->error;
	if (soap_out_int(soap, "confid", -1, &a->confid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__addMember * SOAP_FMAC4 soap_in_mcu__addMember(struct soap *soap, const char *tag, struct mcu__addMember *a, const char *type)
{
	size_t soap_flag_confid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__addMember *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__addMember, sizeof(struct mcu__addMember), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__addMember(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_confid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "confid", &a->confid, "xsd:int"))
				{	soap_flag_confid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__addMember *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__addMember, 0, sizeof(struct mcu__addMember), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_confid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__addMember(struct soap *soap, const struct mcu__addMember *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__addMember);
	if (soap_out_mcu__addMember(soap, tag?tag:"mcu:addMember", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__addMember * SOAP_FMAC4 soap_get_mcu__addMember(struct soap *soap, struct mcu__addMember *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__addMember(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__addMember * SOAP_FMAC2 soap_instantiate_mcu__addMember(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__addMember(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__addMember, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__addMember);
		if (size)
			*size = sizeof(struct mcu__addMember);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__addMember, n);
		if (size)
			*size = n * sizeof(struct mcu__addMember);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__addMember*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__addMember(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__addMember %p -> %p\n", q, p));
	*(struct mcu__addMember*)p = *(struct mcu__addMember*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__MemberArray(struct soap *soap, struct mcu__MemberArray *a)
{	(void)soap;
	(void)soap; /* appease -Wall -Werror */
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__MemberArray(struct soap *soap, struct mcu__MemberArray const*a)
{
#ifndef WITH_NOIDREF
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_mcu__MemberArray))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_mcu__Member);
			soap_serialize_mcu__Member(soap, a->__ptr + i);
		}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__MemberArray(struct soap *soap, const char *tag, int id, const struct mcu__MemberArray *a, const char *type)
{
	int i, n = a->__size;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_mcu__MemberArray);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap_out_mcu__Member(soap, "item", -1, &a->__ptr[i], "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__MemberArray * SOAP_FMAC4 soap_in_mcu__MemberArray(struct soap *soap, const char *tag, struct mcu__MemberArray *a, const char *type)
{	int i, j;
	struct mcu__Member *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_array(soap, "mcu:Member") && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct mcu__MemberArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__MemberArray, sizeof(struct mcu__MemberArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__MemberArray(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = soap_new_mcu__Member(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_mcu__Member(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_mcu__Member(soap, NULL, a->__ptr + i, "mcu:Member"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (struct mcu__Member *)soap_push_block(soap, NULL, sizeof(struct mcu__Member));
				if (!p)
					return NULL;
				SOAP_PLACEMENT_NEW(p, struct mcu__Member);
				soap_default_mcu__Member(soap, p);
				if (!soap_in_mcu__Member(soap, NULL, p, "mcu:Member"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			if (soap->blist->size)
				a->__ptr = soap_new_mcu__Member(soap, soap->blist->size/sizeof(struct mcu__Member));
			else
				a->__ptr = NULL;
			soap_save_block(soap, NULL, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__MemberArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__MemberArray, 0, sizeof(struct mcu__MemberArray), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__MemberArray(struct soap *soap, const struct mcu__MemberArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_mcu__MemberArray);
	if (soap_out_mcu__MemberArray(soap, tag?tag:"mcu:MemberArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__MemberArray * SOAP_FMAC4 soap_get_mcu__MemberArray(struct soap *soap, struct mcu__MemberArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__MemberArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__MemberArray * SOAP_FMAC2 soap_instantiate_mcu__MemberArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__MemberArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__MemberArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__MemberArray);
		if (size)
			*size = sizeof(struct mcu__MemberArray);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__MemberArray, n);
		if (size)
			*size = n * sizeof(struct mcu__MemberArray);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__MemberArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__MemberArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__MemberArray %p -> %p\n", q, p));
	*(struct mcu__MemberArray*)p = *(struct mcu__MemberArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__MemberResponse(struct soap *soap, const struct mcu__Member *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->name);
	soap_serialize_mcu__VideoSourceArray(soap, &a->sources);
	soap_serialize_mcu__VideoSinkArray(soap, &a->sinks);
	soap_serialize_mcu__AudioStream(soap, &a->audio);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__MemberResponse(struct soap *soap, const char *tag, int id, const struct mcu__Member *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__MemberResponse), type))
		return soap->error;
	if (soap_out_int(soap, "memberid", -1, &a->memberid, ""))
		return soap->error;
	if (soap_out_string(soap, "name", -1, &a->name, ""))
		return soap->error;
	if (soap_out_mcu__VideoSourceArray(soap, "sources", -1, &a->sources, ""))
		return soap->error;
	if (soap_out_mcu__VideoSinkArray(soap, "sinks", -1, &a->sinks, ""))
		return soap->error;
	if (soap_out_mcu__AudioStream(soap, "audio", -1, &a->audio, ""))
		return soap->error;
	if (soap_out_int(soap, "enableaudio", -1, &a->enableaudio, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__Member * SOAP_FMAC4 soap_in_mcu__MemberResponse(struct soap *soap, const char *tag, struct mcu__Member *a, const char *type)
{
	size_t soap_flag_memberid = 1;
	size_t soap_flag_name = 1;
	size_t soap_flag_sources = 1;
	size_t soap_flag_sinks = 1;
	size_t soap_flag_audio = 1;
	size_t soap_flag_enableaudio = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__Member *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__MemberResponse, sizeof(struct mcu__Member), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__MemberResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_memberid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "memberid", &a->memberid, "xsd:int"))
				{	soap_flag_memberid--;
					continue;
				}
			if (soap_flag_name && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name--;
					continue;
				}
			if (soap_flag_sources && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mcu__VideoSourceArray(soap, "sources", &a->sources, "mcu:VideoSourceArray"))
				{	soap_flag_sources--;
					continue;
				}
			if (soap_flag_sinks && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mcu__VideoSinkArray(soap, "sinks", &a->sinks, "mcu:VideoSinkArray"))
				{	soap_flag_sinks--;
					continue;
				}
			if (soap_flag_audio && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mcu__AudioStream(soap, "audio", &a->audio, "mcu:AudioStream"))
				{	soap_flag_audio--;
					continue;
				}
			if (soap_flag_enableaudio && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "enableaudio", &a->enableaudio, "xsd:int"))
				{	soap_flag_enableaudio--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__Member *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__MemberResponse, 0, sizeof(struct mcu__Member), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_memberid > 0 || soap_flag_sources > 0 || soap_flag_sinks > 0 || soap_flag_audio > 0 || soap_flag_enableaudio > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__MemberResponse(struct soap *soap, const struct mcu__Member *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__MemberResponse);
	if (soap_out_mcu__MemberResponse(soap, tag?tag:"mcu:MemberResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__Member * SOAP_FMAC4 soap_get_mcu__MemberResponse(struct soap *soap, struct mcu__Member *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__MemberResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__Member(struct soap *soap, struct mcu__Member *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->memberid);
	soap_default_string(soap, &a->name);
	soap_default_mcu__VideoSourceArray(soap, &a->sources);
	soap_default_mcu__VideoSinkArray(soap, &a->sinks);
	soap_default_mcu__AudioStream(soap, &a->audio);
	soap_default_int(soap, &a->enableaudio);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__Member(struct soap *soap, const struct mcu__Member *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->name);
	soap_serialize_mcu__VideoSourceArray(soap, &a->sources);
	soap_serialize_mcu__VideoSinkArray(soap, &a->sinks);
	soap_serialize_mcu__AudioStream(soap, &a->audio);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__Member(struct soap *soap, const char *tag, int id, const struct mcu__Member *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__Member), type))
		return soap->error;
	if (soap_out_int(soap, "memberid", -1, &a->memberid, ""))
		return soap->error;
	if (soap_out_string(soap, "name", -1, &a->name, ""))
		return soap->error;
	if (soap_out_mcu__VideoSourceArray(soap, "sources", -1, &a->sources, ""))
		return soap->error;
	if (soap_out_mcu__VideoSinkArray(soap, "sinks", -1, &a->sinks, ""))
		return soap->error;
	if (soap_out_mcu__AudioStream(soap, "audio", -1, &a->audio, ""))
		return soap->error;
	if (soap_out_int(soap, "enableaudio", -1, &a->enableaudio, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__Member * SOAP_FMAC4 soap_in_mcu__Member(struct soap *soap, const char *tag, struct mcu__Member *a, const char *type)
{
	size_t soap_flag_memberid = 1;
	size_t soap_flag_name = 1;
	size_t soap_flag_sources = 1;
	size_t soap_flag_sinks = 1;
	size_t soap_flag_audio = 1;
	size_t soap_flag_enableaudio = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__Member *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__Member, sizeof(struct mcu__Member), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__Member(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_memberid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "memberid", &a->memberid, "xsd:int"))
				{	soap_flag_memberid--;
					continue;
				}
			if (soap_flag_name && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "name", &a->name, "xsd:string"))
				{	soap_flag_name--;
					continue;
				}
			if (soap_flag_sources && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mcu__VideoSourceArray(soap, "sources", &a->sources, "mcu:VideoSourceArray"))
				{	soap_flag_sources--;
					continue;
				}
			if (soap_flag_sinks && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mcu__VideoSinkArray(soap, "sinks", &a->sinks, "mcu:VideoSinkArray"))
				{	soap_flag_sinks--;
					continue;
				}
			if (soap_flag_audio && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mcu__AudioStream(soap, "audio", &a->audio, "mcu:AudioStream"))
				{	soap_flag_audio--;
					continue;
				}
			if (soap_flag_enableaudio && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "enableaudio", &a->enableaudio, "xsd:int"))
				{	soap_flag_enableaudio--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__Member *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__Member, 0, sizeof(struct mcu__Member), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_memberid > 0 || soap_flag_sources > 0 || soap_flag_sinks > 0 || soap_flag_audio > 0 || soap_flag_enableaudio > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__Member(struct soap *soap, const struct mcu__Member *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__Member);
	if (soap_out_mcu__Member(soap, tag?tag:"mcu:Member", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__Member * SOAP_FMAC4 soap_get_mcu__Member(struct soap *soap, struct mcu__Member *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__Member(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__Member * SOAP_FMAC2 soap_instantiate_mcu__Member(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__Member(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__Member, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__Member);
		if (size)
			*size = sizeof(struct mcu__Member);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__Member, n);
		if (size)
			*size = n * sizeof(struct mcu__Member);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__Member*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__Member(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__Member %p -> %p\n", q, p));
	*(struct mcu__Member*)p = *(struct mcu__Member*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__delAudioStream(struct soap *soap, struct mcu__delAudioStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->confid);
	soap_default_int(soap, &a->memberid);
	soap_default_int(soap, &a->streamid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__delAudioStream(struct soap *soap, const struct mcu__delAudioStream *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__delAudioStream(struct soap *soap, const char *tag, int id, const struct mcu__delAudioStream *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__delAudioStream), type))
		return soap->error;
	if (soap_out_int(soap, "confid", -1, &a->confid, ""))
		return soap->error;
	if (soap_out_int(soap, "memberid", -1, &a->memberid, ""))
		return soap->error;
	if (soap_out_int(soap, "streamid", -1, &a->streamid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__delAudioStream * SOAP_FMAC4 soap_in_mcu__delAudioStream(struct soap *soap, const char *tag, struct mcu__delAudioStream *a, const char *type)
{
	size_t soap_flag_confid = 1;
	size_t soap_flag_memberid = 1;
	size_t soap_flag_streamid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__delAudioStream *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__delAudioStream, sizeof(struct mcu__delAudioStream), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__delAudioStream(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_confid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "confid", &a->confid, "xsd:int"))
				{	soap_flag_confid--;
					continue;
				}
			if (soap_flag_memberid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "memberid", &a->memberid, "xsd:int"))
				{	soap_flag_memberid--;
					continue;
				}
			if (soap_flag_streamid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "streamid", &a->streamid, "xsd:int"))
				{	soap_flag_streamid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__delAudioStream *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__delAudioStream, 0, sizeof(struct mcu__delAudioStream), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_confid > 0 || soap_flag_memberid > 0 || soap_flag_streamid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__delAudioStream(struct soap *soap, const struct mcu__delAudioStream *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__delAudioStream);
	if (soap_out_mcu__delAudioStream(soap, tag?tag:"mcu:delAudioStream", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__delAudioStream * SOAP_FMAC4 soap_get_mcu__delAudioStream(struct soap *soap, struct mcu__delAudioStream *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__delAudioStream(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__delAudioStream * SOAP_FMAC2 soap_instantiate_mcu__delAudioStream(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__delAudioStream(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__delAudioStream, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__delAudioStream);
		if (size)
			*size = sizeof(struct mcu__delAudioStream);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__delAudioStream, n);
		if (size)
			*size = n * sizeof(struct mcu__delAudioStream);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__delAudioStream*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__delAudioStream(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__delAudioStream %p -> %p\n", q, p));
	*(struct mcu__delAudioStream*)p = *(struct mcu__delAudioStream*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__addAudioStream(struct soap *soap, struct mcu__addAudioStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->confid);
	soap_default_int(soap, &a->memberid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__addAudioStream(struct soap *soap, const struct mcu__addAudioStream *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__addAudioStream(struct soap *soap, const char *tag, int id, const struct mcu__addAudioStream *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__addAudioStream), type))
		return soap->error;
	if (soap_out_int(soap, "confid", -1, &a->confid, ""))
		return soap->error;
	if (soap_out_int(soap, "memberid", -1, &a->memberid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__addAudioStream * SOAP_FMAC4 soap_in_mcu__addAudioStream(struct soap *soap, const char *tag, struct mcu__addAudioStream *a, const char *type)
{
	size_t soap_flag_confid = 1;
	size_t soap_flag_memberid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__addAudioStream *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__addAudioStream, sizeof(struct mcu__addAudioStream), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__addAudioStream(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_confid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "confid", &a->confid, "xsd:int"))
				{	soap_flag_confid--;
					continue;
				}
			if (soap_flag_memberid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "memberid", &a->memberid, "xsd:int"))
				{	soap_flag_memberid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__addAudioStream *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__addAudioStream, 0, sizeof(struct mcu__addAudioStream), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_confid > 0 || soap_flag_memberid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__addAudioStream(struct soap *soap, const struct mcu__addAudioStream *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__addAudioStream);
	if (soap_out_mcu__addAudioStream(soap, tag?tag:"mcu:addAudioStream", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__addAudioStream * SOAP_FMAC4 soap_get_mcu__addAudioStream(struct soap *soap, struct mcu__addAudioStream *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__addAudioStream(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__addAudioStream * SOAP_FMAC2 soap_instantiate_mcu__addAudioStream(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__addAudioStream(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__addAudioStream, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__addAudioStream);
		if (size)
			*size = sizeof(struct mcu__addAudioStream);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__addAudioStream, n);
		if (size)
			*size = n * sizeof(struct mcu__addAudioStream);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__addAudioStream*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__addAudioStream(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__addAudioStream %p -> %p\n", q, p));
	*(struct mcu__addAudioStream*)p = *(struct mcu__addAudioStream*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__AudioStreamResponse(struct soap *soap, const struct mcu__AudioStream *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_mcu__MediaEndpoint(soap, &a->endpoint);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__AudioStreamResponse(struct soap *soap, const char *tag, int id, const struct mcu__AudioStream *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__AudioStreamResponse), type))
		return soap->error;
	if (soap_out_int(soap, "streamid", -1, &a->streamid, ""))
		return soap->error;
	if (soap_out_mcu__MediaEndpoint(soap, "endpoint", -1, &a->endpoint, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__AudioStream * SOAP_FMAC4 soap_in_mcu__AudioStreamResponse(struct soap *soap, const char *tag, struct mcu__AudioStream *a, const char *type)
{
	size_t soap_flag_streamid = 1;
	size_t soap_flag_endpoint = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__AudioStream *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__AudioStreamResponse, sizeof(struct mcu__AudioStream), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__AudioStreamResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_streamid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "streamid", &a->streamid, "xsd:int"))
				{	soap_flag_streamid--;
					continue;
				}
			if (soap_flag_endpoint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mcu__MediaEndpoint(soap, "endpoint", &a->endpoint, "mcu:MediaEndpoint"))
				{	soap_flag_endpoint--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__AudioStream *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__AudioStreamResponse, 0, sizeof(struct mcu__AudioStream), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_streamid > 0 || soap_flag_endpoint > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__AudioStreamResponse(struct soap *soap, const struct mcu__AudioStream *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__AudioStreamResponse);
	if (soap_out_mcu__AudioStreamResponse(soap, tag?tag:"mcu:AudioStreamResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__AudioStream * SOAP_FMAC4 soap_get_mcu__AudioStreamResponse(struct soap *soap, struct mcu__AudioStream *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__AudioStreamResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__AudioStream(struct soap *soap, struct mcu__AudioStream *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->streamid);
	soap_default_mcu__MediaEndpoint(soap, &a->endpoint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__AudioStream(struct soap *soap, const struct mcu__AudioStream *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_mcu__MediaEndpoint(soap, &a->endpoint);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__AudioStream(struct soap *soap, const char *tag, int id, const struct mcu__AudioStream *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__AudioStream), type))
		return soap->error;
	if (soap_out_int(soap, "streamid", -1, &a->streamid, ""))
		return soap->error;
	if (soap_out_mcu__MediaEndpoint(soap, "endpoint", -1, &a->endpoint, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__AudioStream * SOAP_FMAC4 soap_in_mcu__AudioStream(struct soap *soap, const char *tag, struct mcu__AudioStream *a, const char *type)
{
	size_t soap_flag_streamid = 1;
	size_t soap_flag_endpoint = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__AudioStream *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__AudioStream, sizeof(struct mcu__AudioStream), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__AudioStream(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_streamid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "streamid", &a->streamid, "xsd:int"))
				{	soap_flag_streamid--;
					continue;
				}
			if (soap_flag_endpoint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mcu__MediaEndpoint(soap, "endpoint", &a->endpoint, "mcu:MediaEndpoint"))
				{	soap_flag_endpoint--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__AudioStream *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__AudioStream, 0, sizeof(struct mcu__AudioStream), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_streamid > 0 || soap_flag_endpoint > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__AudioStream(struct soap *soap, const struct mcu__AudioStream *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__AudioStream);
	if (soap_out_mcu__AudioStream(soap, tag?tag:"mcu:AudioStream", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__AudioStream * SOAP_FMAC4 soap_get_mcu__AudioStream(struct soap *soap, struct mcu__AudioStream *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__AudioStream(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__AudioStream * SOAP_FMAC2 soap_instantiate_mcu__AudioStream(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__AudioStream(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__AudioStream, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__AudioStream);
		if (size)
			*size = sizeof(struct mcu__AudioStream);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__AudioStream, n);
		if (size)
			*size = n * sizeof(struct mcu__AudioStream);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__AudioStream*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__AudioStream(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__AudioStream %p -> %p\n", q, p));
	*(struct mcu__AudioStream*)p = *(struct mcu__AudioStream*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__delVideoSink(struct soap *soap, struct mcu__delVideoSink *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->confid);
	soap_default_int(soap, &a->memberid);
	soap_default_int(soap, &a->sinkid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__delVideoSink(struct soap *soap, const struct mcu__delVideoSink *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__delVideoSink(struct soap *soap, const char *tag, int id, const struct mcu__delVideoSink *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__delVideoSink), type))
		return soap->error;
	if (soap_out_int(soap, "confid", -1, &a->confid, ""))
		return soap->error;
	if (soap_out_int(soap, "memberid", -1, &a->memberid, ""))
		return soap->error;
	if (soap_out_int(soap, "sinkid", -1, &a->sinkid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__delVideoSink * SOAP_FMAC4 soap_in_mcu__delVideoSink(struct soap *soap, const char *tag, struct mcu__delVideoSink *a, const char *type)
{
	size_t soap_flag_confid = 1;
	size_t soap_flag_memberid = 1;
	size_t soap_flag_sinkid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__delVideoSink *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__delVideoSink, sizeof(struct mcu__delVideoSink), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__delVideoSink(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_confid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "confid", &a->confid, "xsd:int"))
				{	soap_flag_confid--;
					continue;
				}
			if (soap_flag_memberid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "memberid", &a->memberid, "xsd:int"))
				{	soap_flag_memberid--;
					continue;
				}
			if (soap_flag_sinkid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "sinkid", &a->sinkid, "xsd:int"))
				{	soap_flag_sinkid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__delVideoSink *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__delVideoSink, 0, sizeof(struct mcu__delVideoSink), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_confid > 0 || soap_flag_memberid > 0 || soap_flag_sinkid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__delVideoSink(struct soap *soap, const struct mcu__delVideoSink *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__delVideoSink);
	if (soap_out_mcu__delVideoSink(soap, tag?tag:"mcu:delVideoSink", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__delVideoSink * SOAP_FMAC4 soap_get_mcu__delVideoSink(struct soap *soap, struct mcu__delVideoSink *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__delVideoSink(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__delVideoSink * SOAP_FMAC2 soap_instantiate_mcu__delVideoSink(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__delVideoSink(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__delVideoSink, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__delVideoSink);
		if (size)
			*size = sizeof(struct mcu__delVideoSink);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__delVideoSink, n);
		if (size)
			*size = n * sizeof(struct mcu__delVideoSink);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__delVideoSink*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__delVideoSink(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__delVideoSink %p -> %p\n", q, p));
	*(struct mcu__delVideoSink*)p = *(struct mcu__delVideoSink*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__addVideoSink(struct soap *soap, struct mcu__addVideoSink *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->confid);
	soap_default_int(soap, &a->memberid);
	soap_default_int(soap, &a->sourceid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__addVideoSink(struct soap *soap, const struct mcu__addVideoSink *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__addVideoSink(struct soap *soap, const char *tag, int id, const struct mcu__addVideoSink *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__addVideoSink), type))
		return soap->error;
	if (soap_out_int(soap, "confid", -1, &a->confid, ""))
		return soap->error;
	if (soap_out_int(soap, "memberid", -1, &a->memberid, ""))
		return soap->error;
	if (soap_out_int(soap, "sourceid", -1, &a->sourceid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__addVideoSink * SOAP_FMAC4 soap_in_mcu__addVideoSink(struct soap *soap, const char *tag, struct mcu__addVideoSink *a, const char *type)
{
	size_t soap_flag_confid = 1;
	size_t soap_flag_memberid = 1;
	size_t soap_flag_sourceid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__addVideoSink *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__addVideoSink, sizeof(struct mcu__addVideoSink), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__addVideoSink(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_confid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "confid", &a->confid, "xsd:int"))
				{	soap_flag_confid--;
					continue;
				}
			if (soap_flag_memberid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "memberid", &a->memberid, "xsd:int"))
				{	soap_flag_memberid--;
					continue;
				}
			if (soap_flag_sourceid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "sourceid", &a->sourceid, "xsd:int"))
				{	soap_flag_sourceid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__addVideoSink *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__addVideoSink, 0, sizeof(struct mcu__addVideoSink), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_confid > 0 || soap_flag_memberid > 0 || soap_flag_sourceid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__addVideoSink(struct soap *soap, const struct mcu__addVideoSink *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__addVideoSink);
	if (soap_out_mcu__addVideoSink(soap, tag?tag:"mcu:addVideoSink", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__addVideoSink * SOAP_FMAC4 soap_get_mcu__addVideoSink(struct soap *soap, struct mcu__addVideoSink *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__addVideoSink(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__addVideoSink * SOAP_FMAC2 soap_instantiate_mcu__addVideoSink(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__addVideoSink(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__addVideoSink, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__addVideoSink);
		if (size)
			*size = sizeof(struct mcu__addVideoSink);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__addVideoSink, n);
		if (size)
			*size = n * sizeof(struct mcu__addVideoSink);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__addVideoSink*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__addVideoSink(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__addVideoSink %p -> %p\n", q, p));
	*(struct mcu__addVideoSink*)p = *(struct mcu__addVideoSink*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__VideoSinkArray(struct soap *soap, struct mcu__VideoSinkArray *a)
{	(void)soap;
	(void)soap; /* appease -Wall -Werror */
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__VideoSinkArray(struct soap *soap, struct mcu__VideoSinkArray const*a)
{
#ifndef WITH_NOIDREF
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_mcu__VideoSinkArray))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_mcu__VideoSink);
			soap_serialize_mcu__VideoSink(soap, a->__ptr + i);
		}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__VideoSinkArray(struct soap *soap, const char *tag, int id, const struct mcu__VideoSinkArray *a, const char *type)
{
	int i, n = a->__size;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_mcu__VideoSinkArray);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap_out_mcu__VideoSink(soap, "item", -1, &a->__ptr[i], "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__VideoSinkArray * SOAP_FMAC4 soap_in_mcu__VideoSinkArray(struct soap *soap, const char *tag, struct mcu__VideoSinkArray *a, const char *type)
{	int i, j;
	struct mcu__VideoSink *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_array(soap, "mcu:VideoSink") && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct mcu__VideoSinkArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__VideoSinkArray, sizeof(struct mcu__VideoSinkArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__VideoSinkArray(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = soap_new_mcu__VideoSink(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_mcu__VideoSink(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_mcu__VideoSink(soap, NULL, a->__ptr + i, "mcu:VideoSink"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (struct mcu__VideoSink *)soap_push_block(soap, NULL, sizeof(struct mcu__VideoSink));
				if (!p)
					return NULL;
				SOAP_PLACEMENT_NEW(p, struct mcu__VideoSink);
				soap_default_mcu__VideoSink(soap, p);
				if (!soap_in_mcu__VideoSink(soap, NULL, p, "mcu:VideoSink"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			if (soap->blist->size)
				a->__ptr = soap_new_mcu__VideoSink(soap, soap->blist->size/sizeof(struct mcu__VideoSink));
			else
				a->__ptr = NULL;
			soap_save_block(soap, NULL, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__VideoSinkArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__VideoSinkArray, 0, sizeof(struct mcu__VideoSinkArray), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__VideoSinkArray(struct soap *soap, const struct mcu__VideoSinkArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_mcu__VideoSinkArray);
	if (soap_out_mcu__VideoSinkArray(soap, tag?tag:"mcu:VideoSinkArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__VideoSinkArray * SOAP_FMAC4 soap_get_mcu__VideoSinkArray(struct soap *soap, struct mcu__VideoSinkArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__VideoSinkArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__VideoSinkArray * SOAP_FMAC2 soap_instantiate_mcu__VideoSinkArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__VideoSinkArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__VideoSinkArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__VideoSinkArray);
		if (size)
			*size = sizeof(struct mcu__VideoSinkArray);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__VideoSinkArray, n);
		if (size)
			*size = n * sizeof(struct mcu__VideoSinkArray);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__VideoSinkArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__VideoSinkArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__VideoSinkArray %p -> %p\n", q, p));
	*(struct mcu__VideoSinkArray*)p = *(struct mcu__VideoSinkArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__VideoSinkResponse(struct soap *soap, const struct mcu__VideoSink *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_mcu__MediaEndpoint(soap, &a->endpoint);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__VideoSinkResponse(struct soap *soap, const char *tag, int id, const struct mcu__VideoSink *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__VideoSinkResponse), type))
		return soap->error;
	if (soap_out_int(soap, "sinkid", -1, &a->sinkid, ""))
		return soap->error;
	if (soap_out_int(soap, "sourceid", -1, &a->sourceid, ""))
		return soap->error;
	if (soap_out_mcu__MediaEndpoint(soap, "endpoint", -1, &a->endpoint, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__VideoSink * SOAP_FMAC4 soap_in_mcu__VideoSinkResponse(struct soap *soap, const char *tag, struct mcu__VideoSink *a, const char *type)
{
	size_t soap_flag_sinkid = 1;
	size_t soap_flag_sourceid = 1;
	size_t soap_flag_endpoint = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__VideoSink *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__VideoSinkResponse, sizeof(struct mcu__VideoSink), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__VideoSinkResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sinkid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "sinkid", &a->sinkid, "xsd:int"))
				{	soap_flag_sinkid--;
					continue;
				}
			if (soap_flag_sourceid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "sourceid", &a->sourceid, "xsd:int"))
				{	soap_flag_sourceid--;
					continue;
				}
			if (soap_flag_endpoint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mcu__MediaEndpoint(soap, "endpoint", &a->endpoint, "mcu:MediaEndpoint"))
				{	soap_flag_endpoint--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__VideoSink *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__VideoSinkResponse, 0, sizeof(struct mcu__VideoSink), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_sinkid > 0 || soap_flag_sourceid > 0 || soap_flag_endpoint > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__VideoSinkResponse(struct soap *soap, const struct mcu__VideoSink *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__VideoSinkResponse);
	if (soap_out_mcu__VideoSinkResponse(soap, tag?tag:"mcu:VideoSinkResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__VideoSink * SOAP_FMAC4 soap_get_mcu__VideoSinkResponse(struct soap *soap, struct mcu__VideoSink *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__VideoSinkResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__VideoSink(struct soap *soap, struct mcu__VideoSink *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->sinkid);
	soap_default_int(soap, &a->sourceid);
	soap_default_mcu__MediaEndpoint(soap, &a->endpoint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__VideoSink(struct soap *soap, const struct mcu__VideoSink *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_mcu__MediaEndpoint(soap, &a->endpoint);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__VideoSink(struct soap *soap, const char *tag, int id, const struct mcu__VideoSink *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__VideoSink), type))
		return soap->error;
	if (soap_out_int(soap, "sinkid", -1, &a->sinkid, ""))
		return soap->error;
	if (soap_out_int(soap, "sourceid", -1, &a->sourceid, ""))
		return soap->error;
	if (soap_out_mcu__MediaEndpoint(soap, "endpoint", -1, &a->endpoint, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__VideoSink * SOAP_FMAC4 soap_in_mcu__VideoSink(struct soap *soap, const char *tag, struct mcu__VideoSink *a, const char *type)
{
	size_t soap_flag_sinkid = 1;
	size_t soap_flag_sourceid = 1;
	size_t soap_flag_endpoint = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__VideoSink *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__VideoSink, sizeof(struct mcu__VideoSink), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__VideoSink(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sinkid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "sinkid", &a->sinkid, "xsd:int"))
				{	soap_flag_sinkid--;
					continue;
				}
			if (soap_flag_sourceid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "sourceid", &a->sourceid, "xsd:int"))
				{	soap_flag_sourceid--;
					continue;
				}
			if (soap_flag_endpoint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mcu__MediaEndpoint(soap, "endpoint", &a->endpoint, "mcu:MediaEndpoint"))
				{	soap_flag_endpoint--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__VideoSink *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__VideoSink, 0, sizeof(struct mcu__VideoSink), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_sinkid > 0 || soap_flag_sourceid > 0 || soap_flag_endpoint > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__VideoSink(struct soap *soap, const struct mcu__VideoSink *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__VideoSink);
	if (soap_out_mcu__VideoSink(soap, tag?tag:"mcu:VideoSink", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__VideoSink * SOAP_FMAC4 soap_get_mcu__VideoSink(struct soap *soap, struct mcu__VideoSink *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__VideoSink(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__VideoSink * SOAP_FMAC2 soap_instantiate_mcu__VideoSink(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__VideoSink(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__VideoSink, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__VideoSink);
		if (size)
			*size = sizeof(struct mcu__VideoSink);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__VideoSink, n);
		if (size)
			*size = n * sizeof(struct mcu__VideoSink);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__VideoSink*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__VideoSink(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__VideoSink %p -> %p\n", q, p));
	*(struct mcu__VideoSink*)p = *(struct mcu__VideoSink*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__delVideoSource(struct soap *soap, struct mcu__delVideoSource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->confid);
	soap_default_int(soap, &a->memberid);
	soap_default_int(soap, &a->sourceid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__delVideoSource(struct soap *soap, const struct mcu__delVideoSource *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__delVideoSource(struct soap *soap, const char *tag, int id, const struct mcu__delVideoSource *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__delVideoSource), type))
		return soap->error;
	if (soap_out_int(soap, "confid", -1, &a->confid, ""))
		return soap->error;
	if (soap_out_int(soap, "memberid", -1, &a->memberid, ""))
		return soap->error;
	if (soap_out_int(soap, "sourceid", -1, &a->sourceid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__delVideoSource * SOAP_FMAC4 soap_in_mcu__delVideoSource(struct soap *soap, const char *tag, struct mcu__delVideoSource *a, const char *type)
{
	size_t soap_flag_confid = 1;
	size_t soap_flag_memberid = 1;
	size_t soap_flag_sourceid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__delVideoSource *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__delVideoSource, sizeof(struct mcu__delVideoSource), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__delVideoSource(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_confid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "confid", &a->confid, "xsd:int"))
				{	soap_flag_confid--;
					continue;
				}
			if (soap_flag_memberid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "memberid", &a->memberid, "xsd:int"))
				{	soap_flag_memberid--;
					continue;
				}
			if (soap_flag_sourceid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "sourceid", &a->sourceid, "xsd:int"))
				{	soap_flag_sourceid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__delVideoSource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__delVideoSource, 0, sizeof(struct mcu__delVideoSource), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_confid > 0 || soap_flag_memberid > 0 || soap_flag_sourceid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__delVideoSource(struct soap *soap, const struct mcu__delVideoSource *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__delVideoSource);
	if (soap_out_mcu__delVideoSource(soap, tag?tag:"mcu:delVideoSource", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__delVideoSource * SOAP_FMAC4 soap_get_mcu__delVideoSource(struct soap *soap, struct mcu__delVideoSource *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__delVideoSource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__delVideoSource * SOAP_FMAC2 soap_instantiate_mcu__delVideoSource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__delVideoSource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__delVideoSource, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__delVideoSource);
		if (size)
			*size = sizeof(struct mcu__delVideoSource);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__delVideoSource, n);
		if (size)
			*size = n * sizeof(struct mcu__delVideoSource);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__delVideoSource*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__delVideoSource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__delVideoSource %p -> %p\n", q, p));
	*(struct mcu__delVideoSource*)p = *(struct mcu__delVideoSource*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__addVideoSource(struct soap *soap, struct mcu__addVideoSource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->confid);
	soap_default_int(soap, &a->memberid);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__addVideoSource(struct soap *soap, const struct mcu__addVideoSource *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__addVideoSource(struct soap *soap, const char *tag, int id, const struct mcu__addVideoSource *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__addVideoSource), type))
		return soap->error;
	if (soap_out_int(soap, "confid", -1, &a->confid, ""))
		return soap->error;
	if (soap_out_int(soap, "memberid", -1, &a->memberid, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__addVideoSource * SOAP_FMAC4 soap_in_mcu__addVideoSource(struct soap *soap, const char *tag, struct mcu__addVideoSource *a, const char *type)
{
	size_t soap_flag_confid = 1;
	size_t soap_flag_memberid = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__addVideoSource *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__addVideoSource, sizeof(struct mcu__addVideoSource), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__addVideoSource(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_confid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "confid", &a->confid, "xsd:int"))
				{	soap_flag_confid--;
					continue;
				}
			if (soap_flag_memberid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "memberid", &a->memberid, "xsd:int"))
				{	soap_flag_memberid--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__addVideoSource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__addVideoSource, 0, sizeof(struct mcu__addVideoSource), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_confid > 0 || soap_flag_memberid > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__addVideoSource(struct soap *soap, const struct mcu__addVideoSource *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__addVideoSource);
	if (soap_out_mcu__addVideoSource(soap, tag?tag:"mcu:addVideoSource", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__addVideoSource * SOAP_FMAC4 soap_get_mcu__addVideoSource(struct soap *soap, struct mcu__addVideoSource *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__addVideoSource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__addVideoSource * SOAP_FMAC2 soap_instantiate_mcu__addVideoSource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__addVideoSource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__addVideoSource, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__addVideoSource);
		if (size)
			*size = sizeof(struct mcu__addVideoSource);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__addVideoSource, n);
		if (size)
			*size = n * sizeof(struct mcu__addVideoSource);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__addVideoSource*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__addVideoSource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__addVideoSource %p -> %p\n", q, p));
	*(struct mcu__addVideoSource*)p = *(struct mcu__addVideoSource*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__VideoSourceArray(struct soap *soap, struct mcu__VideoSourceArray *a)
{	(void)soap;
	(void)soap; /* appease -Wall -Werror */
	a->__size = 0;
	a->__ptr = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__VideoSourceArray(struct soap *soap, struct mcu__VideoSourceArray const*a)
{
#ifndef WITH_NOIDREF
	int i;
	if (a->__ptr && !soap_array_reference(soap, a, (struct soap_array*)&a->__ptr, 1, SOAP_TYPE_mcu__VideoSourceArray))
		for (i = 0; i < a->__size; i++)
		{	soap_embedded(soap, a->__ptr + i, SOAP_TYPE_mcu__VideoSource);
			soap_serialize_mcu__VideoSource(soap, a->__ptr + i);
		}
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__VideoSourceArray(struct soap *soap, const char *tag, int id, const struct mcu__VideoSourceArray *a, const char *type)
{
	int i, n = a->__size;
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_mcu__VideoSourceArray);
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	for (i = 0; i < n; i++)
	{
		soap_out_mcu__VideoSource(soap, "item", -1, &a->__ptr[i], "");
	}
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__VideoSourceArray * SOAP_FMAC4 soap_in_mcu__VideoSourceArray(struct soap *soap, const char *tag, struct mcu__VideoSourceArray *a, const char *type)
{	int i, j;
	struct mcu__VideoSource *p;
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_array(soap, "mcu:VideoSource") && soap_match_tag(soap, soap->type, type))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (struct mcu__VideoSourceArray *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__VideoSourceArray, sizeof(struct mcu__VideoSourceArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__VideoSourceArray(soap, a);
	if (soap->body && !*soap->href)
	{
		a->__size = soap_getsize(soap->arraySize, soap->arrayOffset, &j);
		if (a->__size >= 0)
		{	a->__ptr = soap_new_mcu__VideoSource(soap, a->__size);
			for (i = 0; i < a->__size; i++)
				soap_default_mcu__VideoSource(soap, a->__ptr+i);
			for (i = 0; i < a->__size; i++)
			{	soap_peek_element(soap);
				if (soap->position)
				{	i = soap->positions[0]-j;
					if (i < 0 || i >= a->__size)
					{	soap->error = SOAP_IOB;
						return NULL;
					}
				}
				if (!soap_in_mcu__VideoSource(soap, NULL, a->__ptr + i, "mcu:VideoSource"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
		}
		else
		{	if (soap_new_block(soap) == NULL)
				return NULL;
			for (a->__size = 0; ; a->__size++)
			{	p = (struct mcu__VideoSource *)soap_push_block(soap, NULL, sizeof(struct mcu__VideoSource));
				if (!p)
					return NULL;
				SOAP_PLACEMENT_NEW(p, struct mcu__VideoSource);
				soap_default_mcu__VideoSource(soap, p);
				if (!soap_in_mcu__VideoSource(soap, NULL, p, "mcu:VideoSource"))
				{	if (soap->error != SOAP_NO_TAG)
						return NULL;
					soap->error = SOAP_OK;
					break;
				}
			}
			soap_pop_block(soap, NULL);
			if (soap->blist->size)
				a->__ptr = soap_new_mcu__VideoSource(soap, soap->blist->size/sizeof(struct mcu__VideoSource));
			else
				a->__ptr = NULL;
			soap_save_block(soap, NULL, (char*)a->__ptr, 1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__VideoSourceArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__VideoSourceArray, 0, sizeof(struct mcu__VideoSourceArray), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__VideoSourceArray(struct soap *soap, const struct mcu__VideoSourceArray *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, (struct soap_array*)&a->__ptr, 1, tag, SOAP_TYPE_mcu__VideoSourceArray);
	if (soap_out_mcu__VideoSourceArray(soap, tag?tag:"mcu:VideoSourceArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__VideoSourceArray * SOAP_FMAC4 soap_get_mcu__VideoSourceArray(struct soap *soap, struct mcu__VideoSourceArray *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__VideoSourceArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__VideoSourceArray * SOAP_FMAC2 soap_instantiate_mcu__VideoSourceArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__VideoSourceArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__VideoSourceArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__VideoSourceArray);
		if (size)
			*size = sizeof(struct mcu__VideoSourceArray);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__VideoSourceArray, n);
		if (size)
			*size = n * sizeof(struct mcu__VideoSourceArray);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__VideoSourceArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__VideoSourceArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__VideoSourceArray %p -> %p\n", q, p));
	*(struct mcu__VideoSourceArray*)p = *(struct mcu__VideoSourceArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__VideoSourceResponse(struct soap *soap, const struct mcu__VideoSource *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_mcu__MediaEndpoint(soap, &a->endpoint);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__VideoSourceResponse(struct soap *soap, const char *tag, int id, const struct mcu__VideoSource *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__VideoSourceResponse), type))
		return soap->error;
	if (soap_out_int(soap, "sourceid", -1, &a->sourceid, ""))
		return soap->error;
	if (soap_out_int(soap, "codec", -1, &a->codec, ""))
		return soap->error;
	if (soap_out_mcu__MediaEndpoint(soap, "endpoint", -1, &a->endpoint, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__VideoSource * SOAP_FMAC4 soap_in_mcu__VideoSourceResponse(struct soap *soap, const char *tag, struct mcu__VideoSource *a, const char *type)
{
	size_t soap_flag_sourceid = 1;
	size_t soap_flag_codec = 1;
	size_t soap_flag_endpoint = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__VideoSource *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__VideoSourceResponse, sizeof(struct mcu__VideoSource), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__VideoSourceResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sourceid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "sourceid", &a->sourceid, "xsd:int"))
				{	soap_flag_sourceid--;
					continue;
				}
			if (soap_flag_codec && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "codec", &a->codec, "xsd:int"))
				{	soap_flag_codec--;
					continue;
				}
			if (soap_flag_endpoint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mcu__MediaEndpoint(soap, "endpoint", &a->endpoint, "mcu:MediaEndpoint"))
				{	soap_flag_endpoint--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__VideoSource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__VideoSourceResponse, 0, sizeof(struct mcu__VideoSource), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_sourceid > 0 || soap_flag_codec > 0 || soap_flag_endpoint > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__VideoSourceResponse(struct soap *soap, const struct mcu__VideoSource *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__VideoSourceResponse);
	if (soap_out_mcu__VideoSourceResponse(soap, tag?tag:"mcu:VideoSourceResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__VideoSource * SOAP_FMAC4 soap_get_mcu__VideoSourceResponse(struct soap *soap, struct mcu__VideoSource *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__VideoSourceResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__VideoSource(struct soap *soap, struct mcu__VideoSource *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->sourceid);
	soap_default_int(soap, &a->codec);
	soap_default_mcu__MediaEndpoint(soap, &a->endpoint);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__VideoSource(struct soap *soap, const struct mcu__VideoSource *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_mcu__MediaEndpoint(soap, &a->endpoint);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__VideoSource(struct soap *soap, const char *tag, int id, const struct mcu__VideoSource *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__VideoSource), type))
		return soap->error;
	if (soap_out_int(soap, "sourceid", -1, &a->sourceid, ""))
		return soap->error;
	if (soap_out_int(soap, "codec", -1, &a->codec, ""))
		return soap->error;
	if (soap_out_mcu__MediaEndpoint(soap, "endpoint", -1, &a->endpoint, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__VideoSource * SOAP_FMAC4 soap_in_mcu__VideoSource(struct soap *soap, const char *tag, struct mcu__VideoSource *a, const char *type)
{
	size_t soap_flag_sourceid = 1;
	size_t soap_flag_codec = 1;
	size_t soap_flag_endpoint = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__VideoSource *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__VideoSource, sizeof(struct mcu__VideoSource), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__VideoSource(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_sourceid && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "sourceid", &a->sourceid, "xsd:int"))
				{	soap_flag_sourceid--;
					continue;
				}
			if (soap_flag_codec && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "codec", &a->codec, "xsd:int"))
				{	soap_flag_codec--;
					continue;
				}
			if (soap_flag_endpoint && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_mcu__MediaEndpoint(soap, "endpoint", &a->endpoint, "mcu:MediaEndpoint"))
				{	soap_flag_endpoint--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__VideoSource *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__VideoSource, 0, sizeof(struct mcu__VideoSource), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_sourceid > 0 || soap_flag_codec > 0 || soap_flag_endpoint > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__VideoSource(struct soap *soap, const struct mcu__VideoSource *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__VideoSource);
	if (soap_out_mcu__VideoSource(soap, tag?tag:"mcu:VideoSource", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__VideoSource * SOAP_FMAC4 soap_get_mcu__VideoSource(struct soap *soap, struct mcu__VideoSource *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__VideoSource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__VideoSource * SOAP_FMAC2 soap_instantiate_mcu__VideoSource(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__VideoSource(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__VideoSource, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__VideoSource);
		if (size)
			*size = sizeof(struct mcu__VideoSource);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__VideoSource, n);
		if (size)
			*size = n * sizeof(struct mcu__VideoSource);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__VideoSource*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__VideoSource(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__VideoSource %p -> %p\n", q, p));
	*(struct mcu__VideoSource*)p = *(struct mcu__VideoSource*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__MediaEndpoint(struct soap *soap, struct mcu__MediaEndpoint *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->peerip);
	soap_default_int(soap, &a->peerrtp);
	soap_default_int(soap, &a->peerrtcp);
	soap_default_string(soap, &a->ip);
	soap_default_int(soap, &a->rtp);
	soap_default_int(soap, &a->rtcp);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__MediaEndpoint(struct soap *soap, const struct mcu__MediaEndpoint *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->peerip);
	soap_serialize_string(soap, &a->ip);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__MediaEndpoint(struct soap *soap, const char *tag, int id, const struct mcu__MediaEndpoint *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__MediaEndpoint), type))
		return soap->error;
	if (soap_out_string(soap, "peerip", -1, &a->peerip, ""))
		return soap->error;
	if (soap_out_int(soap, "peerrtp", -1, &a->peerrtp, ""))
		return soap->error;
	if (soap_out_int(soap, "peerrtcp", -1, &a->peerrtcp, ""))
		return soap->error;
	if (soap_out_string(soap, "ip", -1, &a->ip, ""))
		return soap->error;
	if (soap_out_int(soap, "rtp", -1, &a->rtp, ""))
		return soap->error;
	if (soap_out_int(soap, "rtcp", -1, &a->rtcp, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__MediaEndpoint * SOAP_FMAC4 soap_in_mcu__MediaEndpoint(struct soap *soap, const char *tag, struct mcu__MediaEndpoint *a, const char *type)
{
	size_t soap_flag_peerip = 1;
	size_t soap_flag_peerrtp = 1;
	size_t soap_flag_peerrtcp = 1;
	size_t soap_flag_ip = 1;
	size_t soap_flag_rtp = 1;
	size_t soap_flag_rtcp = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__MediaEndpoint *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__MediaEndpoint, sizeof(struct mcu__MediaEndpoint), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__MediaEndpoint(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_peerip && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "peerip", &a->peerip, "xsd:string"))
				{	soap_flag_peerip--;
					continue;
				}
			if (soap_flag_peerrtp && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "peerrtp", &a->peerrtp, "xsd:int"))
				{	soap_flag_peerrtp--;
					continue;
				}
			if (soap_flag_peerrtcp && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "peerrtcp", &a->peerrtcp, "xsd:int"))
				{	soap_flag_peerrtcp--;
					continue;
				}
			if (soap_flag_ip && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "ip", &a->ip, "xsd:string"))
				{	soap_flag_ip--;
					continue;
				}
			if (soap_flag_rtp && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "rtp", &a->rtp, "xsd:int"))
				{	soap_flag_rtp--;
					continue;
				}
			if (soap_flag_rtcp && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "rtcp", &a->rtcp, "xsd:int"))
				{	soap_flag_rtcp--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__MediaEndpoint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__MediaEndpoint, 0, sizeof(struct mcu__MediaEndpoint), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_peerrtp > 0 || soap_flag_peerrtcp > 0 || soap_flag_rtp > 0 || soap_flag_rtcp > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__MediaEndpoint(struct soap *soap, const struct mcu__MediaEndpoint *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__MediaEndpoint);
	if (soap_out_mcu__MediaEndpoint(soap, tag?tag:"mcu:MediaEndpoint", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__MediaEndpoint * SOAP_FMAC4 soap_get_mcu__MediaEndpoint(struct soap *soap, struct mcu__MediaEndpoint *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__MediaEndpoint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__MediaEndpoint * SOAP_FMAC2 soap_instantiate_mcu__MediaEndpoint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__MediaEndpoint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__MediaEndpoint, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__MediaEndpoint);
		if (size)
			*size = sizeof(struct mcu__MediaEndpoint);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__MediaEndpoint, n);
		if (size)
			*size = n * sizeof(struct mcu__MediaEndpoint);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__MediaEndpoint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__MediaEndpoint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__MediaEndpoint %p -> %p\n", q, p));
	*(struct mcu__MediaEndpoint*)p = *(struct mcu__MediaEndpoint*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__getStatus(struct soap *soap, struct mcu__getStatus *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _param_2 skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__getStatus(struct soap *soap, const struct mcu__getStatus *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _param_2 skipped */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__getStatus(struct soap *soap, const char *tag, int id, const struct mcu__getStatus *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__getStatus), type))
		return soap->error;
	/* transient _param_2 skipped */
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__getStatus * SOAP_FMAC4 soap_in_mcu__getStatus(struct soap *soap, const char *tag, struct mcu__getStatus *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__getStatus *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__getStatus, sizeof(struct mcu__getStatus), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__getStatus(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _param_2 skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__getStatus *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__getStatus, 0, sizeof(struct mcu__getStatus), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__getStatus(struct soap *soap, const struct mcu__getStatus *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__getStatus);
	if (soap_out_mcu__getStatus(soap, tag?tag:"mcu:getStatus", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__getStatus * SOAP_FMAC4 soap_get_mcu__getStatus(struct soap *soap, struct mcu__getStatus *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__getStatus(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__getStatus * SOAP_FMAC2 soap_instantiate_mcu__getStatus(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__getStatus(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__getStatus, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__getStatus);
		if (size)
			*size = sizeof(struct mcu__getStatus);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__getStatus, n);
		if (size)
			*size = n * sizeof(struct mcu__getStatus);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__getStatus*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__getStatus(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__getStatus %p -> %p\n", q, p));
	*(struct mcu__getStatus*)p = *(struct mcu__getStatus*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__StatusResponse(struct soap *soap, const struct mcu__Status *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__StatusResponse(struct soap *soap, const char *tag, int id, const struct mcu__Status *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__StatusResponse), type))
		return soap->error;
	if (soap_out_double(soap, "uptime", -1, &a->uptime, ""))
		return soap->error;
	if (soap_out_int(soap, "conferences", -1, &a->conferences, ""))
		return soap->error;
	if (soap_out_double(soap, "up-kbps5", -1, &a->up_kbps5, ""))
		return soap->error;
	if (soap_out_double(soap, "up-kbps60", -1, &a->up_kbps60, ""))
		return soap->error;
	if (soap_out_double(soap, "up-kbps300", -1, &a->up_kbps300, ""))
		return soap->error;
	if (soap_out_double(soap, "down-kbps5", -1, &a->down_kbps5, ""))
		return soap->error;
	if (soap_out_double(soap, "down-kbps60", -1, &a->down_kbps60, ""))
		return soap->error;
	if (soap_out_double(soap, "down-kbps300", -1, &a->down_kbps300, ""))
		return soap->error;
	if (soap_out_double(soap, "cpu", -1, &a->cpu, ""))
		return soap->error;
	if (soap_out_double(soap, "mem", -1, &a->mem, ""))
		return soap->error;
	if (soap_out_double(soap, "up-lost-ratio", -1, &a->up_lost_ratio, ""))
		return soap->error;
	if (soap_out_double(soap, "down-lost-ratio", -1, &a->down_lost_ratio, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__Status * SOAP_FMAC4 soap_in_mcu__StatusResponse(struct soap *soap, const char *tag, struct mcu__Status *a, const char *type)
{
	size_t soap_flag_uptime = 1;
	size_t soap_flag_conferences = 1;
	size_t soap_flag_up_kbps5 = 1;
	size_t soap_flag_up_kbps60 = 1;
	size_t soap_flag_up_kbps300 = 1;
	size_t soap_flag_down_kbps5 = 1;
	size_t soap_flag_down_kbps60 = 1;
	size_t soap_flag_down_kbps300 = 1;
	size_t soap_flag_cpu = 1;
	size_t soap_flag_mem = 1;
	size_t soap_flag_up_lost_ratio = 1;
	size_t soap_flag_down_lost_ratio = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__Status *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__StatusResponse, sizeof(struct mcu__Status), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__StatusResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_uptime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "uptime", &a->uptime, "xsd:double"))
				{	soap_flag_uptime--;
					continue;
				}
			if (soap_flag_conferences && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "conferences", &a->conferences, "xsd:int"))
				{	soap_flag_conferences--;
					continue;
				}
			if (soap_flag_up_kbps5 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "up-kbps5", &a->up_kbps5, "xsd:double"))
				{	soap_flag_up_kbps5--;
					continue;
				}
			if (soap_flag_up_kbps60 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "up-kbps60", &a->up_kbps60, "xsd:double"))
				{	soap_flag_up_kbps60--;
					continue;
				}
			if (soap_flag_up_kbps300 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "up-kbps300", &a->up_kbps300, "xsd:double"))
				{	soap_flag_up_kbps300--;
					continue;
				}
			if (soap_flag_down_kbps5 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "down-kbps5", &a->down_kbps5, "xsd:double"))
				{	soap_flag_down_kbps5--;
					continue;
				}
			if (soap_flag_down_kbps60 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "down-kbps60", &a->down_kbps60, "xsd:double"))
				{	soap_flag_down_kbps60--;
					continue;
				}
			if (soap_flag_down_kbps300 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "down-kbps300", &a->down_kbps300, "xsd:double"))
				{	soap_flag_down_kbps300--;
					continue;
				}
			if (soap_flag_cpu && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "cpu", &a->cpu, "xsd:double"))
				{	soap_flag_cpu--;
					continue;
				}
			if (soap_flag_mem && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "mem", &a->mem, "xsd:double"))
				{	soap_flag_mem--;
					continue;
				}
			if (soap_flag_up_lost_ratio && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "up-lost-ratio", &a->up_lost_ratio, "xsd:double"))
				{	soap_flag_up_lost_ratio--;
					continue;
				}
			if (soap_flag_down_lost_ratio && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "down-lost-ratio", &a->down_lost_ratio, "xsd:double"))
				{	soap_flag_down_lost_ratio--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__Status *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__StatusResponse, 0, sizeof(struct mcu__Status), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_uptime > 0 || soap_flag_conferences > 0 || soap_flag_up_kbps5 > 0 || soap_flag_up_kbps60 > 0 || soap_flag_up_kbps300 > 0 || soap_flag_down_kbps5 > 0 || soap_flag_down_kbps60 > 0 || soap_flag_down_kbps300 > 0 || soap_flag_cpu > 0 || soap_flag_mem > 0 || soap_flag_up_lost_ratio > 0 || soap_flag_down_lost_ratio > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__StatusResponse(struct soap *soap, const struct mcu__Status *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__StatusResponse);
	if (soap_out_mcu__StatusResponse(soap, tag?tag:"mcu:StatusResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__Status * SOAP_FMAC4 soap_get_mcu__StatusResponse(struct soap *soap, struct mcu__Status *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__StatusResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__Status(struct soap *soap, struct mcu__Status *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_double(soap, &a->uptime);
	soap_default_int(soap, &a->conferences);
	soap_default_double(soap, &a->up_kbps5);
	soap_default_double(soap, &a->up_kbps60);
	soap_default_double(soap, &a->up_kbps300);
	soap_default_double(soap, &a->down_kbps5);
	soap_default_double(soap, &a->down_kbps60);
	soap_default_double(soap, &a->down_kbps300);
	soap_default_double(soap, &a->cpu);
	soap_default_double(soap, &a->mem);
	soap_default_double(soap, &a->up_lost_ratio);
	soap_default_double(soap, &a->down_lost_ratio);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__Status(struct soap *soap, const struct mcu__Status *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__Status(struct soap *soap, const char *tag, int id, const struct mcu__Status *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__Status), type))
		return soap->error;
	if (soap_out_double(soap, "uptime", -1, &a->uptime, ""))
		return soap->error;
	if (soap_out_int(soap, "conferences", -1, &a->conferences, ""))
		return soap->error;
	if (soap_out_double(soap, "up-kbps5", -1, &a->up_kbps5, ""))
		return soap->error;
	if (soap_out_double(soap, "up-kbps60", -1, &a->up_kbps60, ""))
		return soap->error;
	if (soap_out_double(soap, "up-kbps300", -1, &a->up_kbps300, ""))
		return soap->error;
	if (soap_out_double(soap, "down-kbps5", -1, &a->down_kbps5, ""))
		return soap->error;
	if (soap_out_double(soap, "down-kbps60", -1, &a->down_kbps60, ""))
		return soap->error;
	if (soap_out_double(soap, "down-kbps300", -1, &a->down_kbps300, ""))
		return soap->error;
	if (soap_out_double(soap, "cpu", -1, &a->cpu, ""))
		return soap->error;
	if (soap_out_double(soap, "mem", -1, &a->mem, ""))
		return soap->error;
	if (soap_out_double(soap, "up-lost-ratio", -1, &a->up_lost_ratio, ""))
		return soap->error;
	if (soap_out_double(soap, "down-lost-ratio", -1, &a->down_lost_ratio, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__Status * SOAP_FMAC4 soap_in_mcu__Status(struct soap *soap, const char *tag, struct mcu__Status *a, const char *type)
{
	size_t soap_flag_uptime = 1;
	size_t soap_flag_conferences = 1;
	size_t soap_flag_up_kbps5 = 1;
	size_t soap_flag_up_kbps60 = 1;
	size_t soap_flag_up_kbps300 = 1;
	size_t soap_flag_down_kbps5 = 1;
	size_t soap_flag_down_kbps60 = 1;
	size_t soap_flag_down_kbps300 = 1;
	size_t soap_flag_cpu = 1;
	size_t soap_flag_mem = 1;
	size_t soap_flag_up_lost_ratio = 1;
	size_t soap_flag_down_lost_ratio = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__Status *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__Status, sizeof(struct mcu__Status), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__Status(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_uptime && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "uptime", &a->uptime, "xsd:double"))
				{	soap_flag_uptime--;
					continue;
				}
			if (soap_flag_conferences && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "conferences", &a->conferences, "xsd:int"))
				{	soap_flag_conferences--;
					continue;
				}
			if (soap_flag_up_kbps5 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "up-kbps5", &a->up_kbps5, "xsd:double"))
				{	soap_flag_up_kbps5--;
					continue;
				}
			if (soap_flag_up_kbps60 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "up-kbps60", &a->up_kbps60, "xsd:double"))
				{	soap_flag_up_kbps60--;
					continue;
				}
			if (soap_flag_up_kbps300 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "up-kbps300", &a->up_kbps300, "xsd:double"))
				{	soap_flag_up_kbps300--;
					continue;
				}
			if (soap_flag_down_kbps5 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "down-kbps5", &a->down_kbps5, "xsd:double"))
				{	soap_flag_down_kbps5--;
					continue;
				}
			if (soap_flag_down_kbps60 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "down-kbps60", &a->down_kbps60, "xsd:double"))
				{	soap_flag_down_kbps60--;
					continue;
				}
			if (soap_flag_down_kbps300 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "down-kbps300", &a->down_kbps300, "xsd:double"))
				{	soap_flag_down_kbps300--;
					continue;
				}
			if (soap_flag_cpu && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "cpu", &a->cpu, "xsd:double"))
				{	soap_flag_cpu--;
					continue;
				}
			if (soap_flag_mem && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "mem", &a->mem, "xsd:double"))
				{	soap_flag_mem--;
					continue;
				}
			if (soap_flag_up_lost_ratio && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "up-lost-ratio", &a->up_lost_ratio, "xsd:double"))
				{	soap_flag_up_lost_ratio--;
					continue;
				}
			if (soap_flag_down_lost_ratio && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_double(soap, "down-lost-ratio", &a->down_lost_ratio, "xsd:double"))
				{	soap_flag_down_lost_ratio--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__Status *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__Status, 0, sizeof(struct mcu__Status), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_uptime > 0 || soap_flag_conferences > 0 || soap_flag_up_kbps5 > 0 || soap_flag_up_kbps60 > 0 || soap_flag_up_kbps300 > 0 || soap_flag_down_kbps5 > 0 || soap_flag_down_kbps60 > 0 || soap_flag_down_kbps300 > 0 || soap_flag_cpu > 0 || soap_flag_mem > 0 || soap_flag_up_lost_ratio > 0 || soap_flag_down_lost_ratio > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__Status(struct soap *soap, const struct mcu__Status *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__Status);
	if (soap_out_mcu__Status(soap, tag?tag:"mcu:Status", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__Status * SOAP_FMAC4 soap_get_mcu__Status(struct soap *soap, struct mcu__Status *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__Status(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__Status * SOAP_FMAC2 soap_instantiate_mcu__Status(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__Status(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__Status, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__Status);
		if (size)
			*size = sizeof(struct mcu__Status);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__Status, n);
		if (size)
			*size = n * sizeof(struct mcu__Status);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__Status*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__Status(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__Status %p -> %p\n", q, p));
	*(struct mcu__Status*)p = *(struct mcu__Status*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__getVersion(struct soap *soap, struct mcu__getVersion *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _param_1 skipped */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__getVersion(struct soap *soap, const struct mcu__getVersion *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	/* transient _param_1 skipped */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__getVersion(struct soap *soap, const char *tag, int id, const struct mcu__getVersion *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__getVersion), type))
		return soap->error;
	/* transient _param_1 skipped */
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__getVersion * SOAP_FMAC4 soap_in_mcu__getVersion(struct soap *soap, const char *tag, struct mcu__getVersion *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__getVersion *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__getVersion, sizeof(struct mcu__getVersion), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__getVersion(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
		/* transient _param_1 skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__getVersion *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__getVersion, 0, sizeof(struct mcu__getVersion), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__getVersion(struct soap *soap, const struct mcu__getVersion *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__getVersion);
	if (soap_out_mcu__getVersion(soap, tag?tag:"mcu:getVersion", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__getVersion * SOAP_FMAC4 soap_get_mcu__getVersion(struct soap *soap, struct mcu__getVersion *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__getVersion(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__getVersion * SOAP_FMAC2 soap_instantiate_mcu__getVersion(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__getVersion(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__getVersion, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__getVersion);
		if (size)
			*size = sizeof(struct mcu__getVersion);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__getVersion, n);
		if (size)
			*size = n * sizeof(struct mcu__getVersion);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__getVersion*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__getVersion(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__getVersion %p -> %p\n", q, p));
	*(struct mcu__getVersion*)p = *(struct mcu__getVersion*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__VersionResponse(struct soap *soap, const struct mcu__Version *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->desc);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__VersionResponse(struct soap *soap, const char *tag, int id, const struct mcu__Version *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__VersionResponse), type))
		return soap->error;
	if (soap_out_int(soap, "major", -1, &a->major, ""))
		return soap->error;
	if (soap_out_int(soap, "minor", -1, &a->minor, ""))
		return soap->error;
	if (soap_out_string(soap, "desc", -1, &a->desc, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__Version * SOAP_FMAC4 soap_in_mcu__VersionResponse(struct soap *soap, const char *tag, struct mcu__Version *a, const char *type)
{
	size_t soap_flag_major = 1;
	size_t soap_flag_minor = 1;
	size_t soap_flag_desc = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__Version *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__VersionResponse, sizeof(struct mcu__Version), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__VersionResponse(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_major && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "major", &a->major, "xsd:int"))
				{	soap_flag_major--;
					continue;
				}
			if (soap_flag_minor && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "minor", &a->minor, "xsd:int"))
				{	soap_flag_minor--;
					continue;
				}
			if (soap_flag_desc && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "desc", &a->desc, "xsd:string"))
				{	soap_flag_desc--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__Version *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__VersionResponse, 0, sizeof(struct mcu__Version), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_major > 0 || soap_flag_minor > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__VersionResponse(struct soap *soap, const struct mcu__Version *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__VersionResponse);
	if (soap_out_mcu__VersionResponse(soap, tag?tag:"mcu:VersionResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__Version * SOAP_FMAC4 soap_get_mcu__VersionResponse(struct soap *soap, struct mcu__Version *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__VersionResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_mcu__Version(struct soap *soap, struct mcu__Version *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_int(soap, &a->major);
	soap_default_int(soap, &a->minor);
	soap_default_string(soap, &a->desc);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_mcu__Version(struct soap *soap, const struct mcu__Version *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->desc);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_mcu__Version(struct soap *soap, const char *tag, int id, const struct mcu__Version *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_mcu__Version), type))
		return soap->error;
	if (soap_out_int(soap, "major", -1, &a->major, ""))
		return soap->error;
	if (soap_out_int(soap, "minor", -1, &a->minor, ""))
		return soap->error;
	if (soap_out_string(soap, "desc", -1, &a->desc, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct mcu__Version * SOAP_FMAC4 soap_in_mcu__Version(struct soap *soap, const char *tag, struct mcu__Version *a, const char *type)
{
	size_t soap_flag_major = 1;
	size_t soap_flag_minor = 1;
	size_t soap_flag_desc = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct mcu__Version *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_mcu__Version, sizeof(struct mcu__Version), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_mcu__Version(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_major && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "major", &a->major, "xsd:int"))
				{	soap_flag_major--;
					continue;
				}
			if (soap_flag_minor && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "minor", &a->minor, "xsd:int"))
				{	soap_flag_minor--;
					continue;
				}
			if (soap_flag_desc && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "desc", &a->desc, "xsd:string"))
				{	soap_flag_desc--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct mcu__Version *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_mcu__Version, 0, sizeof(struct mcu__Version), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap_flag_major > 0 || soap_flag_minor > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_mcu__Version(struct soap *soap, const struct mcu__Version *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_mcu__Version);
	if (soap_out_mcu__Version(soap, tag?tag:"mcu:Version", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__Version * SOAP_FMAC4 soap_get_mcu__Version(struct soap *soap, struct mcu__Version *p, const char *tag, const char *type)
{
	if ((p = soap_in_mcu__Version(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct mcu__Version * SOAP_FMAC2 soap_instantiate_mcu__Version(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_mcu__Version(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_mcu__Version, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct mcu__Version);
		if (size)
			*size = sizeof(struct mcu__Version);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct mcu__Version, n);
		if (size)
			*size = n * sizeof(struct mcu__Version);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct mcu__Version*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_mcu__Version(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct mcu__Version %p -> %p\n", q, p));
	*(struct mcu__Version*)p = *(struct mcu__Version*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomcu__Conference(struct soap *soap, struct mcu__Conference *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_mcu__Conference))
		soap_serialize_mcu__Conference(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomcu__Conference(struct soap *soap, const char *tag, int id, struct mcu__Conference *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_mcu__Conference);
	if (id < 0)
		return soap->error;
	return soap_out_mcu__Conference(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct mcu__Conference ** SOAP_FMAC4 soap_in_PointerTomcu__Conference(struct soap *soap, const char *tag, struct mcu__Conference **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct mcu__Conference **)soap_malloc(soap, sizeof(struct mcu__Conference *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_mcu__Conference(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct mcu__Conference **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_mcu__Conference, sizeof(struct mcu__Conference), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomcu__Conference(struct soap *soap, struct mcu__Conference *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTomcu__Conference);
	if (soap_out_PointerTomcu__Conference(soap, tag?tag:"mcu:Conference", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__Conference ** SOAP_FMAC4 soap_get_PointerTomcu__Conference(struct soap *soap, struct mcu__Conference **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTomcu__Conference(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomcu__Member(struct soap *soap, struct mcu__Member *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_mcu__Member))
		soap_serialize_mcu__Member(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomcu__Member(struct soap *soap, const char *tag, int id, struct mcu__Member *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_mcu__Member);
	if (id < 0)
		return soap->error;
	return soap_out_mcu__Member(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct mcu__Member ** SOAP_FMAC4 soap_in_PointerTomcu__Member(struct soap *soap, const char *tag, struct mcu__Member **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct mcu__Member **)soap_malloc(soap, sizeof(struct mcu__Member *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_mcu__Member(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct mcu__Member **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_mcu__Member, sizeof(struct mcu__Member), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomcu__Member(struct soap *soap, struct mcu__Member *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTomcu__Member);
	if (soap_out_PointerTomcu__Member(soap, tag?tag:"mcu:Member", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__Member ** SOAP_FMAC4 soap_get_PointerTomcu__Member(struct soap *soap, struct mcu__Member **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTomcu__Member(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomcu__VideoSink(struct soap *soap, struct mcu__VideoSink *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_mcu__VideoSink))
		soap_serialize_mcu__VideoSink(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomcu__VideoSink(struct soap *soap, const char *tag, int id, struct mcu__VideoSink *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_mcu__VideoSink);
	if (id < 0)
		return soap->error;
	return soap_out_mcu__VideoSink(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct mcu__VideoSink ** SOAP_FMAC4 soap_in_PointerTomcu__VideoSink(struct soap *soap, const char *tag, struct mcu__VideoSink **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct mcu__VideoSink **)soap_malloc(soap, sizeof(struct mcu__VideoSink *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_mcu__VideoSink(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct mcu__VideoSink **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_mcu__VideoSink, sizeof(struct mcu__VideoSink), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomcu__VideoSink(struct soap *soap, struct mcu__VideoSink *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTomcu__VideoSink);
	if (soap_out_PointerTomcu__VideoSink(soap, tag?tag:"mcu:VideoSink", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__VideoSink ** SOAP_FMAC4 soap_get_PointerTomcu__VideoSink(struct soap *soap, struct mcu__VideoSink **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTomcu__VideoSink(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTomcu__VideoSource(struct soap *soap, struct mcu__VideoSource *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_mcu__VideoSource))
		soap_serialize_mcu__VideoSource(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTomcu__VideoSource(struct soap *soap, const char *tag, int id, struct mcu__VideoSource *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_mcu__VideoSource);
	if (id < 0)
		return soap->error;
	return soap_out_mcu__VideoSource(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct mcu__VideoSource ** SOAP_FMAC4 soap_in_PointerTomcu__VideoSource(struct soap *soap, const char *tag, struct mcu__VideoSource **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct mcu__VideoSource **)soap_malloc(soap, sizeof(struct mcu__VideoSource *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_mcu__VideoSource(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct mcu__VideoSource **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_mcu__VideoSource, sizeof(struct mcu__VideoSource), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTomcu__VideoSource(struct soap *soap, struct mcu__VideoSource *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTomcu__VideoSource);
	if (soap_out_PointerTomcu__VideoSource(soap, tag?tag:"mcu:VideoSource", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct mcu__VideoSource ** SOAP_FMAC4 soap_get_PointerTomcu__VideoSource(struct soap *soap, struct mcu__VideoSource **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTomcu__VideoSource(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
