/* soapClient.cpp
   Generated by gSOAP 2.8.17r from mcu.interface.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.17r 2014-05-10 07:19:08 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_mcu__getVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_param_1, struct mcu__Version &ver)
{	struct mcu__getVersion soap_tmp_mcu__getVersion;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__getVersion._param_1 = _param_1;
	soap_serializeheader(soap);
	soap_serialize_mcu__getVersion(soap, &soap_tmp_mcu__getVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__getVersion(soap, &soap_tmp_mcu__getVersion, "mcu:getVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__getVersion(soap, &soap_tmp_mcu__getVersion, "mcu:getVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ver)
		return soap_closesock(soap);
	soap_default_mcu__VersionResponse(soap, &ver);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_mcu__VersionResponse(soap, &ver, "mcu:VersionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_mcu__getStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_param_2, struct mcu__Status &res)
{	struct mcu__getStatus soap_tmp_mcu__getStatus;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__getStatus._param_2 = _param_2;
	soap_serializeheader(soap);
	soap_serialize_mcu__getStatus(soap, &soap_tmp_mcu__getStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__getStatus(soap, &soap_tmp_mcu__getStatus, "mcu:getStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__getStatus(soap, &soap_tmp_mcu__getStatus, "mcu:getStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_mcu__StatusResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_mcu__StatusResponse(soap, &res, "mcu:StatusResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_mcu__addVideoSource(struct soap *soap, const char *soap_endpoint, const char *soap_action, int confid, int memberid, struct mcu__VideoSource &res)
{	struct mcu__addVideoSource soap_tmp_mcu__addVideoSource;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__addVideoSource.confid = confid;
	soap_tmp_mcu__addVideoSource.memberid = memberid;
	soap_serializeheader(soap);
	soap_serialize_mcu__addVideoSource(soap, &soap_tmp_mcu__addVideoSource);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__addVideoSource(soap, &soap_tmp_mcu__addVideoSource, "mcu:addVideoSource", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__addVideoSource(soap, &soap_tmp_mcu__addVideoSource, "mcu:addVideoSource", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_mcu__VideoSourceResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_mcu__VideoSourceResponse(soap, &res, "mcu:VideoSourceResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_mcu__delVideoSource(struct soap *soap, const char *soap_endpoint, const char *soap_action, int confid, int memberid, int sourceid)
{	struct mcu__delVideoSource soap_tmp_mcu__delVideoSource;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__delVideoSource.confid = confid;
	soap_tmp_mcu__delVideoSource.memberid = memberid;
	soap_tmp_mcu__delVideoSource.sourceid = sourceid;
	soap_serializeheader(soap);
	soap_serialize_mcu__delVideoSource(soap, &soap_tmp_mcu__delVideoSource);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__delVideoSource(soap, &soap_tmp_mcu__delVideoSource, "mcu:delVideoSource", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__delVideoSource(soap, &soap_tmp_mcu__delVideoSource, "mcu:delVideoSource", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_mcu__delVideoSource(struct soap *soap, struct mcu__delVideoSource *_param_3)
{
	soap_default_mcu__delVideoSource(soap, _param_3);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_mcu__delVideoSource(soap, _param_3, "mcu:delVideoSource", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_mcu__addVideoSink(struct soap *soap, const char *soap_endpoint, const char *soap_action, int confid, int memberid, int sourceid, struct mcu__VideoSink &res)
{	struct mcu__addVideoSink soap_tmp_mcu__addVideoSink;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__addVideoSink.confid = confid;
	soap_tmp_mcu__addVideoSink.memberid = memberid;
	soap_tmp_mcu__addVideoSink.sourceid = sourceid;
	soap_serializeheader(soap);
	soap_serialize_mcu__addVideoSink(soap, &soap_tmp_mcu__addVideoSink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__addVideoSink(soap, &soap_tmp_mcu__addVideoSink, "mcu:addVideoSink", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__addVideoSink(soap, &soap_tmp_mcu__addVideoSink, "mcu:addVideoSink", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_mcu__VideoSinkResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_mcu__VideoSinkResponse(soap, &res, "mcu:VideoSinkResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_mcu__delVideoSink(struct soap *soap, const char *soap_endpoint, const char *soap_action, int confid, int memberid, int sinkid)
{	struct mcu__delVideoSink soap_tmp_mcu__delVideoSink;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__delVideoSink.confid = confid;
	soap_tmp_mcu__delVideoSink.memberid = memberid;
	soap_tmp_mcu__delVideoSink.sinkid = sinkid;
	soap_serializeheader(soap);
	soap_serialize_mcu__delVideoSink(soap, &soap_tmp_mcu__delVideoSink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__delVideoSink(soap, &soap_tmp_mcu__delVideoSink, "mcu:delVideoSink", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__delVideoSink(soap, &soap_tmp_mcu__delVideoSink, "mcu:delVideoSink", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_mcu__delVideoSink(struct soap *soap, struct mcu__delVideoSink *_param_4)
{
	soap_default_mcu__delVideoSink(soap, _param_4);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_mcu__delVideoSink(soap, _param_4, "mcu:delVideoSink", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_mcu__addAudioStream(struct soap *soap, const char *soap_endpoint, const char *soap_action, int confid, int memberid, struct mcu__AudioStream &res)
{	struct mcu__addAudioStream soap_tmp_mcu__addAudioStream;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__addAudioStream.confid = confid;
	soap_tmp_mcu__addAudioStream.memberid = memberid;
	soap_serializeheader(soap);
	soap_serialize_mcu__addAudioStream(soap, &soap_tmp_mcu__addAudioStream);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__addAudioStream(soap, &soap_tmp_mcu__addAudioStream, "mcu:addAudioStream", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__addAudioStream(soap, &soap_tmp_mcu__addAudioStream, "mcu:addAudioStream", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_mcu__AudioStreamResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_mcu__AudioStreamResponse(soap, &res, "mcu:AudioStreamResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_mcu__delAudioStream(struct soap *soap, const char *soap_endpoint, const char *soap_action, int confid, int memberid, int streamid)
{	struct mcu__delAudioStream soap_tmp_mcu__delAudioStream;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__delAudioStream.confid = confid;
	soap_tmp_mcu__delAudioStream.memberid = memberid;
	soap_tmp_mcu__delAudioStream.streamid = streamid;
	soap_serializeheader(soap);
	soap_serialize_mcu__delAudioStream(soap, &soap_tmp_mcu__delAudioStream);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__delAudioStream(soap, &soap_tmp_mcu__delAudioStream, "mcu:delAudioStream", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__delAudioStream(soap, &soap_tmp_mcu__delAudioStream, "mcu:delAudioStream", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_mcu__delAudioStream(struct soap *soap, struct mcu__delAudioStream *_param_5)
{
	soap_default_mcu__delAudioStream(soap, _param_5);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_mcu__delAudioStream(soap, _param_5, "mcu:delAudioStream", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_mcu__addMember(struct soap *soap, const char *soap_endpoint, const char *soap_action, int confid, struct mcu__Member &res)
{	struct mcu__addMember soap_tmp_mcu__addMember;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__addMember.confid = confid;
	soap_serializeheader(soap);
	soap_serialize_mcu__addMember(soap, &soap_tmp_mcu__addMember);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__addMember(soap, &soap_tmp_mcu__addMember, "mcu:addMember", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__addMember(soap, &soap_tmp_mcu__addMember, "mcu:addMember", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_mcu__MemberResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_mcu__MemberResponse(soap, &res, "mcu:MemberResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_mcu__delMember(struct soap *soap, const char *soap_endpoint, const char *soap_action, int confid, int memberid)
{	struct mcu__delMember soap_tmp_mcu__delMember;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__delMember.confid = confid;
	soap_tmp_mcu__delMember.memberid = memberid;
	soap_serializeheader(soap);
	soap_serialize_mcu__delMember(soap, &soap_tmp_mcu__delMember);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__delMember(soap, &soap_tmp_mcu__delMember, "mcu:delMember", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__delMember(soap, &soap_tmp_mcu__delMember, "mcu:delMember", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_mcu__delMember(struct soap *soap, struct mcu__delMember *_param_6)
{
	soap_default_mcu__delMember(soap, _param_6);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_mcu__delMember(soap, _param_6, "mcu:delMember", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_mcu__enableSound(struct soap *soap, const char *soap_endpoint, const char *soap_action, int confid, int memberid, int enable, int &res)
{	struct mcu__enableSound soap_tmp_mcu__enableSound;
	struct mcu__enableSoundResponse *soap_tmp_mcu__enableSoundResponse;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__enableSound.confid = confid;
	soap_tmp_mcu__enableSound.memberid = memberid;
	soap_tmp_mcu__enableSound.enable = enable;
	soap_serializeheader(soap);
	soap_serialize_mcu__enableSound(soap, &soap_tmp_mcu__enableSound);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__enableSound(soap, &soap_tmp_mcu__enableSound, "mcu:enableSound", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__enableSound(soap, &soap_tmp_mcu__enableSound, "mcu:enableSound", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_int(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_mcu__enableSoundResponse = soap_get_mcu__enableSoundResponse(soap, NULL, "mcu:enableSoundResponse", "");
	if (!soap_tmp_mcu__enableSoundResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	res = soap_tmp_mcu__enableSoundResponse->res;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_mcu__addConference(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_param_7, struct mcu__Conference &res)
{	struct mcu__addConference soap_tmp_mcu__addConference;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__addConference._param_7 = _param_7;
	soap_serializeheader(soap);
	soap_serialize_mcu__addConference(soap, &soap_tmp_mcu__addConference);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__addConference(soap, &soap_tmp_mcu__addConference, "mcu:addConference", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__addConference(soap, &soap_tmp_mcu__addConference, "mcu:addConference", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_mcu__ConferenceResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_mcu__ConferenceResponse(soap, &res, "mcu:ConferenceResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_mcu__delConference(struct soap *soap, const char *soap_endpoint, const char *soap_action, int confid)
{	struct mcu__delConference soap_tmp_mcu__delConference;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__delConference.confid = confid;
	soap_serializeheader(soap);
	soap_serialize_mcu__delConference(soap, &soap_tmp_mcu__delConference);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__delConference(soap, &soap_tmp_mcu__delConference, "mcu:delConference", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__delConference(soap, &soap_tmp_mcu__delConference, "mcu:delConference", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_mcu__delConference(struct soap *soap, struct mcu__delConference *_param_8)
{
	soap_default_mcu__delConference(soap, _param_8);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_mcu__delConference(soap, _param_8, "mcu:delConference", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_mcu__listConferences(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_param_9, struct mcu__ConferenceArray &res)
{	struct mcu__listConferences soap_tmp_mcu__listConferences;
	struct mcu__listConferencesResponse *soap_tmp_mcu__listConferencesResponse;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__listConferences._param_9 = _param_9;
	soap_serializeheader(soap);
	soap_serialize_mcu__listConferences(soap, &soap_tmp_mcu__listConferences);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__listConferences(soap, &soap_tmp_mcu__listConferences, "mcu:listConferences", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__listConferences(soap, &soap_tmp_mcu__listConferences, "mcu:listConferences", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_mcu__ConferenceArrayResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_mcu__listConferencesResponse = soap_get_mcu__listConferencesResponse(soap, NULL, "mcu:listConferencesResponse", "");
	if (!soap_tmp_mcu__listConferencesResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	res = soap_tmp_mcu__listConferencesResponse->res;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
