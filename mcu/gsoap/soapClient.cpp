/* soapClient.cpp
   Generated by gSOAP 2.8.17r from mcu.interface.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.17r 2014-05-09 11:22:40 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_mcu__getVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_param_1, struct mcu__Version &ver)
{	struct mcu__getVersion soap_tmp_mcu__getVersion;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__getVersion._param_1 = _param_1;
	soap_serializeheader(soap);
	soap_serialize_mcu__getVersion(soap, &soap_tmp_mcu__getVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__getVersion(soap, &soap_tmp_mcu__getVersion, "mcu:getVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__getVersion(soap, &soap_tmp_mcu__getVersion, "mcu:getVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&ver)
		return soap_closesock(soap);
	soap_default_mcu__VersionResponse(soap, &ver);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_mcu__VersionResponse(soap, &ver, "mcu:VersionResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_mcu__getStatus(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_param_2, struct mcu__Status &res)
{	struct mcu__getStatus soap_tmp_mcu__getStatus;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_mcu__getStatus._param_2 = _param_2;
	soap_serializeheader(soap);
	soap_serialize_mcu__getStatus(soap, &soap_tmp_mcu__getStatus);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__getStatus(soap, &soap_tmp_mcu__getStatus, "mcu:getStatus", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__getStatus(soap, &soap_tmp_mcu__getStatus, "mcu:getStatus", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_mcu__StatusResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_mcu__StatusResponse(soap, &res, "mcu:StatusResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
