/* soapServer.cpp
   Generated by gSOAP 2.8.17r from mcu.interface.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.17r 2014-05-09 11:52:56 GMT")


extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if (soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "mcu:getVersion"))
		return soap_serve_mcu__getVersion(soap);
	if (!soap_match_tag(soap, soap->tag, "mcu:getStatus"))
		return soap_serve_mcu__getStatus(soap);
	if (!soap_match_tag(soap, soap->tag, "mcu:addSource"))
		return soap_serve_mcu__addSource(soap);
	if (!soap_match_tag(soap, soap->tag, "mcu:delSource"))
		return soap_serve_mcu__delSource(soap);
	if (!soap_match_tag(soap, soap->tag, "mcu:addSink"))
		return soap_serve_mcu__addSink(soap);
	if (!soap_match_tag(soap, soap->tag, "mcu:delSink"))
		return soap_serve_mcu__delSink(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mcu__getVersion(struct soap *soap)
{	struct mcu__getVersion soap_tmp_mcu__getVersion;
	struct mcu__Version ver;
	soap_default_mcu__VersionResponse(soap, &ver);
	soap_default_mcu__getVersion(soap, &soap_tmp_mcu__getVersion);
	if (!soap_get_mcu__getVersion(soap, &soap_tmp_mcu__getVersion, "mcu:getVersion", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = mcu__getVersion(soap, soap_tmp_mcu__getVersion._param_1, ver);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_mcu__VersionResponse(soap, &ver);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__VersionResponse(soap, &ver, "mcu:VersionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__VersionResponse(soap, &ver, "mcu:VersionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mcu__getStatus(struct soap *soap)
{	struct mcu__getStatus soap_tmp_mcu__getStatus;
	struct mcu__Status res;
	soap_default_mcu__StatusResponse(soap, &res);
	soap_default_mcu__getStatus(soap, &soap_tmp_mcu__getStatus);
	if (!soap_get_mcu__getStatus(soap, &soap_tmp_mcu__getStatus, "mcu:getStatus", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = mcu__getStatus(soap, soap_tmp_mcu__getStatus._param_2, res);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_mcu__StatusResponse(soap, &res);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__StatusResponse(soap, &res, "mcu:StatusResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__StatusResponse(soap, &res, "mcu:StatusResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mcu__addSource(struct soap *soap)
{	struct mcu__addSource soap_tmp_mcu__addSource;
	struct mcu__VideoSource res;
	soap_default_mcu__VideoSourceResponse(soap, &res);
	soap_default_mcu__addSource(soap, &soap_tmp_mcu__addSource);
	if (!soap_get_mcu__addSource(soap, &soap_tmp_mcu__addSource, "mcu:addSource", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = mcu__addSource(soap, soap_tmp_mcu__addSource.memberid, res);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_mcu__VideoSourceResponse(soap, &res);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__VideoSourceResponse(soap, &res, "mcu:VideoSourceResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__VideoSourceResponse(soap, &res, "mcu:VideoSourceResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mcu__delSource(struct soap *soap)
{	struct mcu__delSource soap_tmp_mcu__delSource;
	soap_default_mcu__delSource(soap, &soap_tmp_mcu__delSource);
	if (!soap_get_mcu__delSource(soap, &soap_tmp_mcu__delSource, "mcu:delSource", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = mcu__delSource(soap, soap_tmp_mcu__delSource.memberid, soap_tmp_mcu__delSource.sourceid);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mcu__addSink(struct soap *soap)
{	struct mcu__addSink soap_tmp_mcu__addSink;
	struct mcu__VideoSink res;
	soap_default_mcu__VideoSinkResponse(soap, &res);
	soap_default_mcu__addSink(soap, &soap_tmp_mcu__addSink);
	if (!soap_get_mcu__addSink(soap, &soap_tmp_mcu__addSink, "mcu:addSink", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = mcu__addSink(soap, soap_tmp_mcu__addSink.memberid, res);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_mcu__VideoSinkResponse(soap, &res);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_mcu__VideoSinkResponse(soap, &res, "mcu:VideoSinkResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_mcu__VideoSinkResponse(soap, &res, "mcu:VideoSinkResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_mcu__delSink(struct soap *soap)
{	struct mcu__delSink soap_tmp_mcu__delSink;
	soap_default_mcu__delSink(soap, &soap_tmp_mcu__delSink);
	if (!soap_get_mcu__delSink(soap, &soap_tmp_mcu__delSink, "mcu:delSink", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = mcu__delSink(soap, soap_tmp_mcu__delSink.memberid, soap_tmp_mcu__delSink.sinkid);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
