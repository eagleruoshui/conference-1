/* soapClient.cpp
   Generated by gSOAP 2.8.17r from zonekey.mcu.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.17r 2014-05-24 09:24:54 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkmcu__getVersion(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_param_1, char **info)
{	struct zkmcu__getVersion soap_tmp_zkmcu__getVersion;
	struct zkmcu__getVersionResponse *soap_tmp_zkmcu__getVersionResponse;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_zkmcu__getVersion._param_1 = _param_1;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__getVersion(soap, &soap_tmp_zkmcu__getVersion);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__getVersion(soap, &soap_tmp_zkmcu__getVersion, "zkmcu:getVersion", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__getVersion(soap, &soap_tmp_zkmcu__getVersion, "zkmcu:getVersion", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!info)
		return soap_closesock(soap);
	*info = NULL;
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_zkmcu__getVersionResponse = soap_get_zkmcu__getVersionResponse(soap, NULL, "zkmcu:getVersionResponse", "");
	if (!soap_tmp_zkmcu__getVersionResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	if (info && soap_tmp_zkmcu__getVersionResponse->info)
		*info = *soap_tmp_zkmcu__getVersionResponse->info;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkmcu__getSysInfo(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_param_2, struct zkmcu__SysInfo &res)
{	struct zkmcu__getSysInfo soap_tmp_zkmcu__getSysInfo;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_zkmcu__getSysInfo._param_2 = _param_2;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__getSysInfo(soap, &soap_tmp_zkmcu__getSysInfo);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__getSysInfo(soap, &soap_tmp_zkmcu__getSysInfo, "zkmcu:getSysInfo", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__getSysInfo(soap, &soap_tmp_zkmcu__getSysInfo, "zkmcu:getSysInfo", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_zkmcu__SysInfoResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_zkmcu__SysInfoResponse(soap, &res, "zkmcu:SysInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkmcu__createConference(struct soap *soap, const char *soap_endpoint, const char *soap_action, struct zkmcu__CreateConference *req, struct zkmcu__CreateConferenceResponse &res)
{	struct zkmcu__createConference soap_tmp_zkmcu__createConference;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_zkmcu__createConference.req = req;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__createConference(soap, &soap_tmp_zkmcu__createConference);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__createConference(soap, &soap_tmp_zkmcu__createConference, "zkmcu:createConference", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__createConference(soap, &soap_tmp_zkmcu__createConference, "zkmcu:createConference", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_zkmcu__CreateConferenceResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_zkmcu__CreateConferenceResponse(soap, &res, "zkmcu:CreateConferenceResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_zkmcu__destroyConference(struct soap *soap, const char *soap_endpoint, const char *soap_action, int cid)
{	struct zkmcu__destroyConference soap_tmp_zkmcu__destroyConference;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_zkmcu__destroyConference.cid = cid;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__destroyConference(soap, &soap_tmp_zkmcu__destroyConference);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__destroyConference(soap, &soap_tmp_zkmcu__destroyConference, "zkmcu:destroyConference", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__destroyConference(soap, &soap_tmp_zkmcu__destroyConference, "zkmcu:destroyConference", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_zkmcu__destroyConference(struct soap *soap, struct zkmcu__destroyConference *_param_3)
{
	soap_default_zkmcu__destroyConference(soap, _param_3);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_zkmcu__destroyConference(soap, _param_3, "zkmcu:destroyConference", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkmcu__listConferences(struct soap *soap, const char *soap_endpoint, const char *soap_action, void *_param_4, struct zkmcu__ConferenceIdArray &res)
{	struct zkmcu__listConferences soap_tmp_zkmcu__listConferences;
	struct zkmcu__listConferencesResponse *soap_tmp_zkmcu__listConferencesResponse;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_zkmcu__listConferences._param_4 = _param_4;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__listConferences(soap, &soap_tmp_zkmcu__listConferences);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__listConferences(soap, &soap_tmp_zkmcu__listConferences, "zkmcu:listConferences", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__listConferences(soap, &soap_tmp_zkmcu__listConferences, "zkmcu:listConferences", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_zkmcu__ConferenceIdArrayResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_zkmcu__listConferencesResponse = soap_get_zkmcu__listConferencesResponse(soap, NULL, "zkmcu:listConferencesResponse", "");
	if (!soap_tmp_zkmcu__listConferencesResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	res = soap_tmp_zkmcu__listConferencesResponse->res;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkmcu__infoConference(struct soap *soap, const char *soap_endpoint, const char *soap_action, int cid, struct zkmcu__ConferenceInfo &res)
{	struct zkmcu__infoConference soap_tmp_zkmcu__infoConference;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_zkmcu__infoConference.cid = cid;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__infoConference(soap, &soap_tmp_zkmcu__infoConference);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__infoConference(soap, &soap_tmp_zkmcu__infoConference, "zkmcu:infoConference", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__infoConference(soap, &soap_tmp_zkmcu__infoConference, "zkmcu:infoConference", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_zkmcu__ConferenceInfoResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_zkmcu__ConferenceInfoResponse(soap, &res, "zkmcu:ConferenceInfoResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkmcu__addSource(struct soap *soap, const char *soap_endpoint, const char *soap_action, int cid, struct zkmcu__AddSourceRequest *req, struct zkmcu__AddSourceResponse &res)
{	struct zkmcu__addSource soap_tmp_zkmcu__addSource;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_zkmcu__addSource.cid = cid;
	soap_tmp_zkmcu__addSource.req = req;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__addSource(soap, &soap_tmp_zkmcu__addSource);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__addSource(soap, &soap_tmp_zkmcu__addSource, "zkmcu:addSource", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__addSource(soap, &soap_tmp_zkmcu__addSource, "zkmcu:addSource", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_zkmcu__AddSourceResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_zkmcu__AddSourceResponse(soap, &res, "zkmcu:AddSourceResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_zkmcu__delSource(struct soap *soap, const char *soap_endpoint, const char *soap_action, int cid, int sourceid)
{	struct zkmcu__delSource soap_tmp_zkmcu__delSource;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_zkmcu__delSource.cid = cid;
	soap_tmp_zkmcu__delSource.sourceid = sourceid;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__delSource(soap, &soap_tmp_zkmcu__delSource);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__delSource(soap, &soap_tmp_zkmcu__delSource, "zkmcu:delSource", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__delSource(soap, &soap_tmp_zkmcu__delSource, "zkmcu:delSource", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_zkmcu__delSource(struct soap *soap, struct zkmcu__delSource *_param_5)
{
	soap_default_zkmcu__delSource(soap, _param_5);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_zkmcu__delSource(soap, _param_5, "zkmcu:delSource", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkmcu__addSink(struct soap *soap, const char *soap_endpoint, const char *soap_action, int cid, struct zkmcu__AddSinkRequest *req, struct zkmcu__AddSinkResponse &res)
{	struct zkmcu__addSink soap_tmp_zkmcu__addSink;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_zkmcu__addSink.cid = cid;
	soap_tmp_zkmcu__addSink.req = req;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__addSink(soap, &soap_tmp_zkmcu__addSink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__addSink(soap, &soap_tmp_zkmcu__addSink, "zkmcu:addSink", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__addSink(soap, &soap_tmp_zkmcu__addSink, "zkmcu:addSink", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_zkmcu__AddSinkResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_zkmcu__AddSinkResponse(soap, &res, "zkmcu:AddSinkResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_zkmcu__delSink(struct soap *soap, const char *soap_endpoint, const char *soap_action, int cid, int sinkid)
{	struct zkmcu__delSink soap_tmp_zkmcu__delSink;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_zkmcu__delSink.cid = cid;
	soap_tmp_zkmcu__delSink.sinkid = sinkid;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__delSink(soap, &soap_tmp_zkmcu__delSink);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__delSink(soap, &soap_tmp_zkmcu__delSink, "zkmcu:delSink", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__delSink(soap, &soap_tmp_zkmcu__delSink, "zkmcu:delSink", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_zkmcu__delSink(struct soap *soap, struct zkmcu__delSink *_param_6)
{
	soap_default_zkmcu__delSink(soap, _param_6);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_zkmcu__delSink(soap, _param_6, "zkmcu:delSink", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkmcu__addStream(struct soap *soap, const char *soap_endpoint, const char *soap_action, int cid, struct zkmcu__AddStreamRequest *req, struct zkmcu__AddStreamResponse &res)
{	struct zkmcu__addStream soap_tmp_zkmcu__addStream;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_zkmcu__addStream.cid = cid;
	soap_tmp_zkmcu__addStream.req = req;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__addStream(soap, &soap_tmp_zkmcu__addStream);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__addStream(soap, &soap_tmp_zkmcu__addStream, "zkmcu:addStream", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__addStream(soap, &soap_tmp_zkmcu__addStream, "zkmcu:addStream", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_zkmcu__AddStreamResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_zkmcu__AddStreamResponse(soap, &res, "zkmcu:AddStreamResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_zkmcu__delStream(struct soap *soap, const char *soap_endpoint, const char *soap_action, int cid, int sourceid)
{	struct zkmcu__delStream soap_tmp_zkmcu__delStream;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_zkmcu__delStream.cid = cid;
	soap_tmp_zkmcu__delStream.sourceid = sourceid;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__delStream(soap, &soap_tmp_zkmcu__delStream);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__delStream(soap, &soap_tmp_zkmcu__delStream, "zkmcu:delStream", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__delStream(soap, &soap_tmp_zkmcu__delStream, "zkmcu:delStream", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_zkmcu__delStream(struct soap *soap, struct zkmcu__delStream *_param_7)
{
	soap_default_zkmcu__delStream(soap, _param_7);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_zkmcu__delStream(soap, _param_7, "zkmcu:delStream", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send_zkmcu__setParams(struct soap *soap, const char *soap_endpoint, const char *soap_action, int cid, struct zkmcu__KeyValueArray *req)
{	struct zkmcu__setParams soap_tmp_zkmcu__setParams;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_zkmcu__setParams.cid = cid;
	soap_tmp_zkmcu__setParams.req = req;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__setParams(soap, &soap_tmp_zkmcu__setParams);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__setParams(soap, &soap_tmp_zkmcu__setParams, "zkmcu:setParams", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__setParams(soap, &soap_tmp_zkmcu__setParams, "zkmcu:setParams", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv_zkmcu__setParams(struct soap *soap, struct zkmcu__setParams *_param_8)
{
	soap_default_zkmcu__setParams(soap, _param_8);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get_zkmcu__setParams(soap, _param_8, "zkmcu:setParams", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_OK;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call_zkmcu__getParams(struct soap *soap, const char *soap_endpoint, const char *soap_action, int cid, struct zkmcu__KeyValueArray &res)
{	struct zkmcu__getParams soap_tmp_zkmcu__getParams;
	struct zkmcu__getParamsResponse *soap_tmp_zkmcu__getParamsResponse;
	soap_begin(soap);
	soap->encodingStyle = NULL;
	soap_tmp_zkmcu__getParams.cid = cid;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__getParams(soap, &soap_tmp_zkmcu__getParams);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__getParams(soap, &soap_tmp_zkmcu__getParams, "zkmcu:getParams", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_url(soap, soap_endpoint, NULL), soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__getParams(soap, &soap_tmp_zkmcu__getParams, "zkmcu:getParams", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!&res)
		return soap_closesock(soap);
	soap_default_zkmcu__KeyValueArrayResponse(soap, &res);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_tmp_zkmcu__getParamsResponse = soap_get_zkmcu__getParamsResponse(soap, NULL, "zkmcu:getParamsResponse", "");
	if (!soap_tmp_zkmcu__getParamsResponse || soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	res = soap_tmp_zkmcu__getParamsResponse->res;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
