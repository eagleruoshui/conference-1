/* soapServer.cpp
   Generated by gSOAP 2.8.17r from zonekey.mcu.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapServer.cpp ver 2.8.17r 2014-05-24 09:24:54 GMT")


extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap *soap)
{
#ifndef WITH_FASTCGI
	unsigned int k = soap->max_keep_alive;
#endif
	do
	{
#ifndef WITH_FASTCGI
		if (soap->max_keep_alive > 0 && !--k)
			soap->keep_alive = 0;
#endif
		if (soap_begin_serve(soap))
		{	if (soap->error >= SOAP_STOP)
				continue;
			return soap->error;
		}
		if (soap_serve_request(soap) || (soap->fserveloop && soap->fserveloop(soap)))
		{
#ifdef WITH_FASTCGI
			soap_send_fault(soap);
#else
			return soap_send_fault(soap);
#endif
		}

#ifdef WITH_FASTCGI
		soap_destroy(soap);
		soap_end(soap);
	} while (1);
#else
	} while (soap->keep_alive);
#endif
	return SOAP_OK;
}

#ifndef WITH_NOSERVEREQUEST
extern "C" SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap *soap)
{
	soap_peek_element(soap);
	if (!soap_match_tag(soap, soap->tag, "zkmcu:getVersion"))
		return soap_serve_zkmcu__getVersion(soap);
	if (!soap_match_tag(soap, soap->tag, "zkmcu:getSysInfo"))
		return soap_serve_zkmcu__getSysInfo(soap);
	if (!soap_match_tag(soap, soap->tag, "zkmcu:createConference"))
		return soap_serve_zkmcu__createConference(soap);
	if (!soap_match_tag(soap, soap->tag, "zkmcu:destroyConference"))
		return soap_serve_zkmcu__destroyConference(soap);
	if (!soap_match_tag(soap, soap->tag, "zkmcu:listConferences"))
		return soap_serve_zkmcu__listConferences(soap);
	if (!soap_match_tag(soap, soap->tag, "zkmcu:infoConference"))
		return soap_serve_zkmcu__infoConference(soap);
	if (!soap_match_tag(soap, soap->tag, "zkmcu:addSource"))
		return soap_serve_zkmcu__addSource(soap);
	if (!soap_match_tag(soap, soap->tag, "zkmcu:delSource"))
		return soap_serve_zkmcu__delSource(soap);
	if (!soap_match_tag(soap, soap->tag, "zkmcu:addSink"))
		return soap_serve_zkmcu__addSink(soap);
	if (!soap_match_tag(soap, soap->tag, "zkmcu:delSink"))
		return soap_serve_zkmcu__delSink(soap);
	if (!soap_match_tag(soap, soap->tag, "zkmcu:addStream"))
		return soap_serve_zkmcu__addStream(soap);
	if (!soap_match_tag(soap, soap->tag, "zkmcu:delStream"))
		return soap_serve_zkmcu__delStream(soap);
	if (!soap_match_tag(soap, soap->tag, "zkmcu:setParams"))
		return soap_serve_zkmcu__setParams(soap);
	if (!soap_match_tag(soap, soap->tag, "zkmcu:getParams"))
		return soap_serve_zkmcu__getParams(soap);
	return soap->error = SOAP_NO_METHOD;
}
#endif

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkmcu__getVersion(struct soap *soap)
{	struct zkmcu__getVersion soap_tmp_zkmcu__getVersion;
	struct zkmcu__getVersionResponse soap_tmp_zkmcu__getVersionResponse;
	char * soap_tmp_string;
	soap_default_zkmcu__getVersionResponse(soap, &soap_tmp_zkmcu__getVersionResponse);
	soap_tmp_string = NULL;
	soap_tmp_zkmcu__getVersionResponse.info = &soap_tmp_string;
	soap_default_zkmcu__getVersion(soap, &soap_tmp_zkmcu__getVersion);
	if (!soap_get_zkmcu__getVersion(soap, &soap_tmp_zkmcu__getVersion, "zkmcu:getVersion", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = zkmcu__getVersion(soap, soap_tmp_zkmcu__getVersion._param_1, soap_tmp_zkmcu__getVersionResponse.info);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__getVersionResponse(soap, &soap_tmp_zkmcu__getVersionResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__getVersionResponse(soap, &soap_tmp_zkmcu__getVersionResponse, "zkmcu:getVersionResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__getVersionResponse(soap, &soap_tmp_zkmcu__getVersionResponse, "zkmcu:getVersionResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkmcu__getSysInfo(struct soap *soap)
{	struct zkmcu__getSysInfo soap_tmp_zkmcu__getSysInfo;
	struct zkmcu__SysInfo res;
	soap_default_zkmcu__SysInfoResponse(soap, &res);
	soap_default_zkmcu__getSysInfo(soap, &soap_tmp_zkmcu__getSysInfo);
	if (!soap_get_zkmcu__getSysInfo(soap, &soap_tmp_zkmcu__getSysInfo, "zkmcu:getSysInfo", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = zkmcu__getSysInfo(soap, soap_tmp_zkmcu__getSysInfo._param_2, res);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__SysInfoResponse(soap, &res);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__SysInfoResponse(soap, &res, "zkmcu:SysInfoResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__SysInfoResponse(soap, &res, "zkmcu:SysInfoResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkmcu__createConference(struct soap *soap)
{	struct zkmcu__createConference soap_tmp_zkmcu__createConference;
	struct zkmcu__CreateConferenceResponse res;
	soap_default_zkmcu__CreateConferenceResponse(soap, &res);
	soap_default_zkmcu__createConference(soap, &soap_tmp_zkmcu__createConference);
	if (!soap_get_zkmcu__createConference(soap, &soap_tmp_zkmcu__createConference, "zkmcu:createConference", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = zkmcu__createConference(soap, soap_tmp_zkmcu__createConference.req, res);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__CreateConferenceResponse(soap, &res);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__CreateConferenceResponse(soap, &res, "zkmcu:CreateConferenceResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__CreateConferenceResponse(soap, &res, "zkmcu:CreateConferenceResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkmcu__destroyConference(struct soap *soap)
{	struct zkmcu__destroyConference soap_tmp_zkmcu__destroyConference;
	soap_default_zkmcu__destroyConference(soap, &soap_tmp_zkmcu__destroyConference);
	if (!soap_get_zkmcu__destroyConference(soap, &soap_tmp_zkmcu__destroyConference, "zkmcu:destroyConference", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = zkmcu__destroyConference(soap, soap_tmp_zkmcu__destroyConference.cid);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkmcu__listConferences(struct soap *soap)
{	struct zkmcu__listConferences soap_tmp_zkmcu__listConferences;
	struct zkmcu__listConferencesResponse soap_tmp_zkmcu__listConferencesResponse;
	soap_default_zkmcu__listConferencesResponse(soap, &soap_tmp_zkmcu__listConferencesResponse);
	soap_default_zkmcu__listConferences(soap, &soap_tmp_zkmcu__listConferences);
	if (!soap_get_zkmcu__listConferences(soap, &soap_tmp_zkmcu__listConferences, "zkmcu:listConferences", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = zkmcu__listConferences(soap, soap_tmp_zkmcu__listConferences._param_4, soap_tmp_zkmcu__listConferencesResponse.res);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__listConferencesResponse(soap, &soap_tmp_zkmcu__listConferencesResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__listConferencesResponse(soap, &soap_tmp_zkmcu__listConferencesResponse, "zkmcu:listConferencesResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__listConferencesResponse(soap, &soap_tmp_zkmcu__listConferencesResponse, "zkmcu:listConferencesResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkmcu__infoConference(struct soap *soap)
{	struct zkmcu__infoConference soap_tmp_zkmcu__infoConference;
	struct zkmcu__ConferenceInfo res;
	soap_default_zkmcu__ConferenceInfoResponse(soap, &res);
	soap_default_zkmcu__infoConference(soap, &soap_tmp_zkmcu__infoConference);
	if (!soap_get_zkmcu__infoConference(soap, &soap_tmp_zkmcu__infoConference, "zkmcu:infoConference", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = zkmcu__infoConference(soap, soap_tmp_zkmcu__infoConference.cid, res);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__ConferenceInfoResponse(soap, &res);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__ConferenceInfoResponse(soap, &res, "zkmcu:ConferenceInfoResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__ConferenceInfoResponse(soap, &res, "zkmcu:ConferenceInfoResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkmcu__addSource(struct soap *soap)
{	struct zkmcu__addSource soap_tmp_zkmcu__addSource;
	struct zkmcu__AddSourceResponse res;
	soap_default_zkmcu__AddSourceResponse(soap, &res);
	soap_default_zkmcu__addSource(soap, &soap_tmp_zkmcu__addSource);
	if (!soap_get_zkmcu__addSource(soap, &soap_tmp_zkmcu__addSource, "zkmcu:addSource", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = zkmcu__addSource(soap, soap_tmp_zkmcu__addSource.cid, soap_tmp_zkmcu__addSource.req, res);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__AddSourceResponse(soap, &res);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__AddSourceResponse(soap, &res, "zkmcu:AddSourceResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__AddSourceResponse(soap, &res, "zkmcu:AddSourceResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkmcu__delSource(struct soap *soap)
{	struct zkmcu__delSource soap_tmp_zkmcu__delSource;
	soap_default_zkmcu__delSource(soap, &soap_tmp_zkmcu__delSource);
	if (!soap_get_zkmcu__delSource(soap, &soap_tmp_zkmcu__delSource, "zkmcu:delSource", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = zkmcu__delSource(soap, soap_tmp_zkmcu__delSource.cid, soap_tmp_zkmcu__delSource.sourceid);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkmcu__addSink(struct soap *soap)
{	struct zkmcu__addSink soap_tmp_zkmcu__addSink;
	struct zkmcu__AddSinkResponse res;
	soap_default_zkmcu__AddSinkResponse(soap, &res);
	soap_default_zkmcu__addSink(soap, &soap_tmp_zkmcu__addSink);
	if (!soap_get_zkmcu__addSink(soap, &soap_tmp_zkmcu__addSink, "zkmcu:addSink", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = zkmcu__addSink(soap, soap_tmp_zkmcu__addSink.cid, soap_tmp_zkmcu__addSink.req, res);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__AddSinkResponse(soap, &res);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__AddSinkResponse(soap, &res, "zkmcu:AddSinkResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__AddSinkResponse(soap, &res, "zkmcu:AddSinkResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkmcu__delSink(struct soap *soap)
{	struct zkmcu__delSink soap_tmp_zkmcu__delSink;
	soap_default_zkmcu__delSink(soap, &soap_tmp_zkmcu__delSink);
	if (!soap_get_zkmcu__delSink(soap, &soap_tmp_zkmcu__delSink, "zkmcu:delSink", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = zkmcu__delSink(soap, soap_tmp_zkmcu__delSink.cid, soap_tmp_zkmcu__delSink.sinkid);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkmcu__addStream(struct soap *soap)
{	struct zkmcu__addStream soap_tmp_zkmcu__addStream;
	struct zkmcu__AddStreamResponse res;
	soap_default_zkmcu__AddStreamResponse(soap, &res);
	soap_default_zkmcu__addStream(soap, &soap_tmp_zkmcu__addStream);
	if (!soap_get_zkmcu__addStream(soap, &soap_tmp_zkmcu__addStream, "zkmcu:addStream", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = zkmcu__addStream(soap, soap_tmp_zkmcu__addStream.cid, soap_tmp_zkmcu__addStream.req, res);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__AddStreamResponse(soap, &res);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__AddStreamResponse(soap, &res, "zkmcu:AddStreamResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__AddStreamResponse(soap, &res, "zkmcu:AddStreamResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkmcu__delStream(struct soap *soap)
{	struct zkmcu__delStream soap_tmp_zkmcu__delStream;
	soap_default_zkmcu__delStream(soap, &soap_tmp_zkmcu__delStream);
	if (!soap_get_zkmcu__delStream(soap, &soap_tmp_zkmcu__delStream, "zkmcu:delStream", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = zkmcu__delStream(soap, soap_tmp_zkmcu__delStream.cid, soap_tmp_zkmcu__delStream.sourceid);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkmcu__setParams(struct soap *soap)
{	struct zkmcu__setParams soap_tmp_zkmcu__setParams;
	soap_default_zkmcu__setParams(soap, &soap_tmp_zkmcu__setParams);
	if (!soap_get_zkmcu__setParams(soap, &soap_tmp_zkmcu__setParams, "zkmcu:setParams", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = zkmcu__setParams(soap, soap_tmp_zkmcu__setParams.cid, soap_tmp_zkmcu__setParams.req);
	if (soap->error)
		return soap->error;
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_zkmcu__getParams(struct soap *soap)
{	struct zkmcu__getParams soap_tmp_zkmcu__getParams;
	struct zkmcu__getParamsResponse soap_tmp_zkmcu__getParamsResponse;
	soap_default_zkmcu__getParamsResponse(soap, &soap_tmp_zkmcu__getParamsResponse);
	soap_default_zkmcu__getParams(soap, &soap_tmp_zkmcu__getParams);
	if (!soap_get_zkmcu__getParams(soap, &soap_tmp_zkmcu__getParams, "zkmcu:getParams", NULL))
		return soap->error;
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap->error;
	soap->error = zkmcu__getParams(soap, soap_tmp_zkmcu__getParams.cid, soap_tmp_zkmcu__getParamsResponse.res);
	if (soap->error)
		return soap->error;
	soap->encodingStyle = NULL;
	soap_serializeheader(soap);
	soap_serialize_zkmcu__getParamsResponse(soap, &soap_tmp_zkmcu__getParamsResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put_zkmcu__getParamsResponse(soap, &soap_tmp_zkmcu__getParamsResponse, "zkmcu:getParamsResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	};
	if (soap_end_count(soap)
	 || soap_response(soap, SOAP_OK)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put_zkmcu__getParamsResponse(soap, &soap_tmp_zkmcu__getParamsResponse, "zkmcu:getParamsResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap->error;
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapServer.cpp */
